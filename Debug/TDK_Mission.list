
TDK_Mission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007950  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08007b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001b0  08007cf8  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08007cf8  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177a4  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f04  00000000  00000000  00037984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003b818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253d1  00000000  00000000  0003c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013893  00000000  00000000  00061a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3ba4  00000000  00000000  00075304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f68  00000000  00000000  00148ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001b0 	.word	0x200001b0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007afc 	.word	0x08007afc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001b4 	.word	0x200001b4
 8000200:	08007afc 	.word	0x08007afc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <_Z9UART_Sendh>:
Arm Arms[2] = {
	{5,6,7,0,0,0,0,true,3,0,0,1780,1780},
	{1,3,4,0,0,0,0,true,3,0,0,1290,1290}
};
//servo control function
void UART_Send(uint8_t u8_data) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t *u8_pointer = &u8_data;
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart5, u8_pointer, 1, 100);
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	2201      	movs	r2, #1
 800051a:	68f9      	ldr	r1, [r7, #12]
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <_Z9UART_Sendh+0x30>)
 800051e:	f006 f832 	bl	8006586 <HAL_UART_Transmit>
	Checksum_Calc += u8_data;
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	461a      	mov	r2, r3
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <_Z9UART_Sendh+0x34>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a03      	ldr	r2, [pc, #12]	; (800053c <_Z9UART_Sendh+0x34>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200004bc 	.word	0x200004bc
 800053c:	200001cc 	.word	0x200001cc

08000540 <_Z26UART_Send_SetMotorPositionttt>:
void UART_Send_SetMotorPosition(uint16_t motorId, uint16_t Position, uint16_t Time) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
 800054a:	460b      	mov	r3, r1
 800054c:	80bb      	strh	r3, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	807b      	strh	r3, [r7, #2]
	Checksum_Calc = 0;
 8000552:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
	UART_Send(0x80 + motorId);    //header mark & broadcast ID
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	3b80      	subs	r3, #128	; 0x80
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffd1 	bl	8000508 <_Z9UART_Sendh>
	UART_Send(0x83);              //header mark & command code
 8000566:	2083      	movs	r0, #131	; 0x83
 8000568:	f7ff ffce 	bl	8000508 <_Z9UART_Sendh>
	UART_Send(0x05);              //total data length
 800056c:	2005      	movs	r0, #5
 800056e:	f7ff ffcb 	bl	8000508 <_Z9UART_Sendh>
	UART_Send((Position / 256) & 0x7F);  //Servo Pos_H
 8000572:	88bb      	ldrh	r3, [r7, #4]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800057e:	b2db      	uxtb	r3, r3
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff ffc1 	bl	8000508 <_Z9UART_Sendh>
	UART_Send(Position % 256);           //Servo Pos_L
 8000586:	88bb      	ldrh	r3, [r7, #4]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffbc 	bl	8000508 <_Z9UART_Sendh>
	UART_Send((Time / 256) & 0x7F); //Servo Time_H
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	0a1b      	lsrs	r3, r3, #8
 8000594:	b29b      	uxth	r3, r3
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ffb2 	bl	8000508 <_Z9UART_Sendh>
	UART_Send(Time % 256);          //Servo Time_L
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ffad 	bl	8000508 <_Z9UART_Sendh>
	UART_Send(Checksum_Calc);     //data length (one servo with time and speed)
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <_Z26UART_Send_SetMotorPositionttt+0x84>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffa7 	bl	8000508 <_Z9UART_Sendh>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200001cc 	.word	0x200001cc

080005c8 <_Z8arm_moveP3Armi>:
		Arms->claw_state = 0;
		Arms->putBall_delay_count = 0;
		Arms->putBall_delay_count_state =0;
	}
}
void arm_move(Arm *Arms,int sign){// put in timer IT
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	//inverseKinematics(x,y,l1,l2,&pos1,&pos2,elbowUp);
	UART_Send_SetMotorPosition(Arms->joint_1_motorId,(uint16_t)(Arms->joint_1_initAngle+7*sign*Arms->joint_1_Pos),reflectime);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	8818      	ldrh	r0, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	b29a      	uxth	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	b299      	uxth	r1, r3
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	fb11 f303 	smulbb	r3, r1, r3
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	00c9      	lsls	r1, r1, #3
 80005f0:	1acb      	subs	r3, r1, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	4413      	add	r3, r2
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	4a11      	ldr	r2, [pc, #68]	; (8000640 <_Z8arm_moveP3Armi+0x78>)
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	4619      	mov	r1, r3
 80005fe:	f7ff ff9f 	bl	8000540 <_Z26UART_Send_SetMotorPositionttt>
	UART_Send_SetMotorPosition(Arms->joint_2_motorId,(uint16_t)(Arms->joint_2_initAngle+7*sign*Arms->joint_2_Pos),reflectime);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	8858      	ldrh	r0, [r3, #2]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	b29a      	uxth	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	b299      	uxth	r1, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	b29b      	uxth	r3, r3
 8000616:	fb11 f303 	smulbb	r3, r1, r3
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	00c9      	lsls	r1, r1, #3
 8000620:	1acb      	subs	r3, r1, r3
 8000622:	b29b      	uxth	r3, r3
 8000624:	4413      	add	r3, r2
 8000626:	b29b      	uxth	r3, r3
 8000628:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_Z8arm_moveP3Armi+0x78>)
 800062a:	8812      	ldrh	r2, [r2, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f7ff ff87 	bl	8000540 <_Z26UART_Send_SetMotorPositionttt>
	claw(Arms);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f86c 	bl	8000710 <_Z4clawP3Arm>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000

08000644 <_Z7ARM_RUNv>:
void ARM_RUN(){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	arm_move(&Arms[0],-1);
 8000648:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <_Z7ARM_RUNv+0x28>)
 800064e:	f7ff ffbb 	bl	80005c8 <_Z8arm_moveP3Armi>
	arm_move(&Arms[1],1);
 8000652:	2101      	movs	r1, #1
 8000654:	4806      	ldr	r0, [pc, #24]	; (8000670 <_Z7ARM_RUNv+0x2c>)
 8000656:	f7ff ffb7 	bl	80005c8 <_Z8arm_moveP3Armi>
	pos_control(&Arms[0]);
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <_Z7ARM_RUNv+0x28>)
 800065c:	f000 f80a 	bl	8000674 <_Z11pos_controlP3Arm>
	pos_control(&Arms[1]);
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <_Z7ARM_RUNv+0x2c>)
 8000662:	f000 f807 	bl	8000674 <_Z11pos_controlP3Arm>
//	claw(&Arms[0]);
//	claw(&Arms[0]);

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000004 	.word	0x20000004
 8000670:	20000034 	.word	0x20000034

08000674 <_Z11pos_controlP3Arm>:
int getball_pos1 = -60 ,getball_pos2 = 40;//get ball from the ground
int putball_rail_pos1 =60 ,putball_rail_pos2 = 85;//get ball on the ground
int putball_TDKbox_pos1 = 50 ,putball_TDKbox_pos2 = -50;//get ball on the TDKbox
int vertical_pos1 = 75,vertical_pos2 = 5;

void pos_control(Arm *Arms){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	/*select arms,zero for the back arm,1 for the front arms,
	pos control,0 for get ball,1 for put ball on rail,2 for put ball on TDK box
	用的時候改bool claw_state[2],[0]前面,[1]後面*/
	if (Arms -> ARM_POS == 0){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d108      	bne.n	8000696 <_Z11pos_controlP3Arm+0x22>
		Arms->joint_1_Pos = getball_pos1;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <_Z11pos_controlP3Arm+0x7c>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	621a      	str	r2, [r3, #32]
		Arms->joint_2_Pos = getball_pos2;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <_Z11pos_controlP3Arm+0x80>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
		Arms->joint_2_Pos = putball_TDKbox_pos2;
	}else if(Arms -> ARM_POS == 3){
		Arms->joint_1_Pos = vertical_pos1 ;
		Arms->joint_2_Pos = vertical_pos2;
	}
}
 8000694:	e025      	b.n	80006e2 <_Z11pos_controlP3Arm+0x6e>
	}else if(Arms -> ARM_POS == 1){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <_Z11pos_controlP3Arm+0x3c>
		Arms->joint_1_Pos = putball_rail_pos1;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <_Z11pos_controlP3Arm+0x84>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	621a      	str	r2, [r3, #32]
		Arms->joint_2_Pos = putball_rail_pos2;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <_Z11pos_controlP3Arm+0x88>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006ae:	e018      	b.n	80006e2 <_Z11pos_controlP3Arm+0x6e>
	}else if(Arms -> ARM_POS == 2){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d108      	bne.n	80006ca <_Z11pos_controlP3Arm+0x56>
		Arms->joint_1_Pos = putball_TDKbox_pos1;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <_Z11pos_controlP3Arm+0x8c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	621a      	str	r2, [r3, #32]
		Arms->joint_2_Pos = putball_TDKbox_pos2;
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <_Z11pos_controlP3Arm+0x90>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006c8:	e00b      	b.n	80006e2 <_Z11pos_controlP3Arm+0x6e>
	}else if(Arms -> ARM_POS == 3){
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d107      	bne.n	80006e2 <_Z11pos_controlP3Arm+0x6e>
		Arms->joint_1_Pos = vertical_pos1 ;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <_Z11pos_controlP3Arm+0x94>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	621a      	str	r2, [r3, #32]
		Arms->joint_2_Pos = vertical_pos2;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <_Z11pos_controlP3Arm+0x98>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	20000064 	.word	0x20000064
 80006f4:	20000068 	.word	0x20000068
 80006f8:	2000006c 	.word	0x2000006c
 80006fc:	20000070 	.word	0x20000070
 8000700:	20000074 	.word	0x20000074
 8000704:	20000078 	.word	0x20000078
 8000708:	2000007c 	.word	0x2000007c
 800070c:	20000080 	.word	0x20000080

08000710 <_Z4clawP3Arm>:
uint16_t close_pos = 2200,open_angle =1200;
void claw(Arm *Arms){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	/*select arms,Arms[0] for the front arm,Arms[1] for the front arms,
	夾爪開關,false for open,true for close,
	用的時候改bool claw_state[2],[0]前面,[1]後面*/
	if (Arms->claw_state == 0){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7e1b      	ldrb	r3, [r3, #24]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d109      	bne.n	8000734 <_Z4clawP3Arm+0x24>
	UART_Send_SetMotorPosition(Arms->claw_motorId,open_angle,500);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	889b      	ldrh	r3, [r3, #4]
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <_Z4clawP3Arm+0x40>)
 8000726:	8811      	ldrh	r1, [r2, #0]
 8000728:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff07 	bl	8000540 <_Z26UART_Send_SetMotorPositionttt>
	}else{
	UART_Send_SetMotorPosition(Arms->claw_motorId,close_pos,500);
	}
}
 8000732:	e008      	b.n	8000746 <_Z4clawP3Arm+0x36>
	UART_Send_SetMotorPosition(Arms->claw_motorId,close_pos,500);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	889b      	ldrh	r3, [r3, #4]
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <_Z4clawP3Arm+0x44>)
 800073a:	8811      	ldrh	r1, [r2, #0]
 800073c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fefd 	bl	8000540 <_Z26UART_Send_SetMotorPositionttt>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000086 	.word	0x20000086
 8000754:	20000084 	.word	0x20000084

08000758 <_Z11upadate_posP3Armi>:
//for script
void upadate_pos(Arm *Arms,int Arm_pos){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	/*ARM[0]是前面的手臂,ARM[1]是後面的;
	pos control,0 是取球姿態,1 是放球到軌道,2 是放球到TDK盒子*/
	Arms->ARM_POS = Arm_pos;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	61da      	str	r2, [r3, #28]
	wait(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f000 fe30 	bl	80013d0 <wait>
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <_Z11update_clawP3Armb>:
void update_claw(Arm *Arms,bool claw_state){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	70fb      	strb	r3, [r7, #3]
	/*ARM[0]是前面的手臂,ARM[1]是後面的;
	claw_state 為true時夾爪夾緊,false時夾爪打開*/
	Arms->claw_state = claw_state;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	78fa      	ldrb	r2, [r7, #3]
 8000788:	761a      	strb	r2, [r3, #24]
	wait(500);
 800078a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078e:	f000 fe1f 	bl	80013d0 <wait>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <_Z10UART_setupv>:

int rx,tx;
extern float statusData[4];
extern UART_HandleTypeDef huart3;

void UART_setup(){
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart3, buffer_RX, sizeof(buffer_RX));
 80007a0:	2201      	movs	r2, #1
 80007a2:	4903      	ldr	r1, [pc, #12]	; (80007b0 <_Z10UART_setupv+0x14>)
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <_Z10UART_setupv+0x18>)
 80007a6:	f005 ffff 	bl	80067a8 <HAL_UART_Receive_DMA>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001e0 	.word	0x200001e0
 80007b4:	20000500 	.word	0x20000500

080007b8 <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff>:
//tx
void UART_TransmitData_Status_IT(UART_HandleTypeDef *huart, float data1, float data2, float data3,float data4) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6178      	str	r0, [r7, #20]
 80007c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80007c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80007c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80007cc:	edc7 1a01 	vstr	s3, [r7, #4]
 80007d0:	693b      	ldr	r3, [r7, #16]
    memcpy(buffer_TX, &data1, sizeof(float));
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff+0x44>)
 80007d4:	6013      	str	r3, [r2, #0]
    memcpy(buffer_TX + sizeof(float), &data2, sizeof(float));
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff+0x48>)
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	6013      	str	r3, [r2, #0]
    memcpy(buffer_TX + 2 * sizeof(float), &data3, sizeof(float));
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff+0x4c>)
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	6013      	str	r3, [r2, #0]
    memcpy(buffer_TX + 3 * sizeof(float), &data4, sizeof(float));
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff+0x50>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit_DMA(huart, buffer_TX, sizeof(buffer_TX));
 80007e8:	2210      	movs	r2, #16
 80007ea:	4904      	ldr	r1, [pc, #16]	; (80007fc <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff+0x44>)
 80007ec:	6978      	ldr	r0, [r7, #20]
 80007ee:	f005 ff5d 	bl	80066ac <HAL_UART_Transmit_DMA>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001d0 	.word	0x200001d0
 8000800:	200001d4 	.word	0x200001d4
 8000804:	200001d8 	.word	0x200001d8
 8000808:	200001dc 	.word	0x200001dc

0800080c <_Z38UART_ReceiveData_arrriveDestination_ITP20__UART_HandleTypeDefPb>:
//rx
void UART_ReceiveData_arrriveDestination_IT(UART_HandleTypeDef *huart, bool *arrive){//put in uart rx IT
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <_Z38UART_ReceiveData_arrriveDestination_ITP20__UART_HandleTypeDefPb+0x24>)
 8000818:	781a      	ldrb	r2, [r3, #0]
	memcpy(arrive, buffer_RX, sizeof(bool));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(huart, buffer_RX, sizeof(buffer_RX));
 800081e:	2201      	movs	r2, #1
 8000820:	4903      	ldr	r1, [pc, #12]	; (8000830 <_Z38UART_ReceiveData_arrriveDestination_ITP20__UART_HandleTypeDefPb+0x24>)
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f005 ffc0 	bl	80067a8 <HAL_UART_Receive_DMA>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200001e0 	.word	0x200001e0

08000834 <_Z13UART_TRANSMITv>:
//傳訊時 call 這個function
void UART_TRANSMIT(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	 UART_TransmitData_Status_IT(&huart3, statusData[0], statusData[1], statusData[2], statusData[3]);
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <_Z13UART_TRANSMITv+0x38>)
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <_Z13UART_TRANSMITv+0x38>)
 8000840:	ed93 7a01 	vldr	s14, [r3, #4]
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <_Z13UART_TRANSMITv+0x38>)
 8000846:	edd3 6a02 	vldr	s13, [r3, #8]
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <_Z13UART_TRANSMITv+0x38>)
 800084c:	ed93 6a03 	vldr	s12, [r3, #12]
 8000850:	eef0 1a46 	vmov.f32	s3, s12
 8000854:	eeb0 1a66 	vmov.f32	s2, s13
 8000858:	eef0 0a47 	vmov.f32	s1, s14
 800085c:	eeb0 0a67 	vmov.f32	s0, s15
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <_Z13UART_TRANSMITv+0x3c>)
 8000862:	f7ff ffa9 	bl	80007b8 <_Z27UART_TransmitData_Status_ITP20__UART_HandleTypeDefffff>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000061c 	.word	0x2000061c
 8000870:	20000500 	.word	0x20000500

08000874 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_UART_TxCpltCallback+0x5c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d120      	bne.n	80008c8 <HAL_UART_TxCpltCallback+0x54>
		tx++;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_UART_TxCpltCallback+0x60>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_UART_TxCpltCallback+0x60>)
 800088e:	6013      	str	r3, [r2, #0]
		if (statusData[0] == 0){
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_UART_TxCpltCallback+0x64>)
 8000892:	edd3 7a00 	vldr	s15, [r3]
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d105      	bne.n	80008ac <HAL_UART_TxCpltCallback+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <HAL_UART_TxCpltCallback+0x68>)
 80008a6:	f003 fd0b 	bl	80042c0 <HAL_GPIO_WritePin>
		}else if (statusData[0] > 0){
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		}
	}

}
 80008aa:	e00d      	b.n	80008c8 <HAL_UART_TxCpltCallback+0x54>
		}else if (statusData[0] > 0){
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_UART_TxCpltCallback+0x64>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dc00      	bgt.n	80008be <HAL_UART_TxCpltCallback+0x4a>
}
 80008bc:	e004      	b.n	80008c8 <HAL_UART_TxCpltCallback+0x54>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2120      	movs	r1, #32
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_UART_TxCpltCallback+0x68>)
 80008c4:	f003 fcfc 	bl	80042c0 <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40004800 	.word	0x40004800
 80008d4:	200001e8 	.word	0x200001e8
 80008d8:	2000061c 	.word	0x2000061c
 80008dc:	40020000 	.word	0x40020000

080008e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == USART3){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_UART_RxCpltCallback+0x2c>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d108      	bne.n	8000904 <HAL_UART_RxCpltCallback+0x24>
		rx++;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_UART_RxCpltCallback+0x30>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a05      	ldr	r2, [pc, #20]	; (8000910 <HAL_UART_RxCpltCallback+0x30>)
 80008fa:	6013      	str	r3, [r2, #0]
		UART_ReceiveData_arrriveDestination_IT(&huart3, &arrive);
 80008fc:	4905      	ldr	r1, [pc, #20]	; (8000914 <HAL_UART_RxCpltCallback+0x34>)
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_UART_RxCpltCallback+0x38>)
 8000900:	f7ff ff84 	bl	800080c <_Z38UART_ReceiveData_arrriveDestination_ITP20__UART_HandleTypeDefPb>
//		}else {
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//		}

	}
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004800 	.word	0x40004800
 8000910:	200001e4 	.word	0x200001e4
 8000914:	200001e1 	.word	0x200001e1
 8000918:	20000500 	.word	0x20000500

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f002 fd9c 	bl	800345c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f824 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 fc14 	bl	8001154 <MX_GPIO_Init>
  MX_DMA_Init();
 800092c:	f000 fbea 	bl	8001104 <MX_DMA_Init>
  MX_TIM1_Init();
 8000930:	f000 f8c8 	bl	8000ac4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000934:	f000 f9bc 	bl	8000cb0 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000938:	f000 fa62 	bl	8000e00 <MX_TIM7_Init>
  MX_UART5_Init();
 800093c:	f000 fb8e 	bl	800105c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000940:	f000 fbb6 	bl	80010b0 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000944:	f000 fb14 	bl	8000f70 <MX_TIM12_Init>
  MX_TIM10_Init();
 8000948:	f000 faca 	bl	8000ee0 <MX_TIM10_Init>
  MX_TIM11_Init();
 800094c:	f000 faec 	bl	8000f28 <MX_TIM11_Init>
  MX_TIM5_Init();
 8000950:	f000 fa02 	bl	8000d58 <MX_TIM5_Init>
  MX_TIM2_Init();
 8000954:	f000 f95e 	bl	8000c14 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000958:	f000 fa88 	bl	8000e6c <MX_TIM9_Init>
  MX_TIM13_Init();
 800095c:	f000 fb5a 	bl	8001014 <MX_TIM13_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000960:	f000 f874 	bl	8000a4c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000964:	f000 fd00 	bl	8001368 <setup>

  main_function();
 8000968:	f000 fd4e 	bl	8001408 <main_function>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x50>
	...

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f007 f8b4 	bl	8007aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <SystemClock_Config+0xd4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <SystemClock_Config+0xd4>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <SystemClock_Config+0xd4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <SystemClock_Config+0xd8>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <SystemClock_Config+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e4:	2310      	movs	r3, #16
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 ffda 	bl	80049b8 <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 fca7 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fc7a 	bl	8004324 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a36:	f000 fc91 	bl	800135c <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2006      	movs	r0, #6
 8000a56:	f002 fe4e 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f002 fe67 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2007      	movs	r0, #7
 8000a66:	f002 fe46 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f002 fe5f 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	200a      	movs	r0, #10
 8000a76:	f002 fe3e 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f002 fe57 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2017      	movs	r0, #23
 8000a86:	f002 fe36 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a8a:	2017      	movs	r0, #23
 8000a8c:	f002 fe4f 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2018      	movs	r0, #24
 8000a96:	f002 fe2e 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000a9a:	2018      	movs	r0, #24
 8000a9c:	f002 fe47 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f002 fe26 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000aaa:	2019      	movs	r0, #25
 8000aac:	f002 fe3f 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2037      	movs	r0, #55	; 0x37
 8000ab6:	f002 fe1e 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000aba:	2037      	movs	r0, #55	; 0x37
 8000abc:	f002 fe37 	bl	800372e <HAL_NVIC_EnableIRQ>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b092      	sub	sp, #72	; 0x48
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2220      	movs	r2, #32
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f006 fffc 	bl	8007aec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af4:	4b45      	ldr	r3, [pc, #276]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000af6:	4a46      	ldr	r2, [pc, #280]	; (8000c10 <MX_TIM1_Init+0x14c>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000afc:	2253      	movs	r2, #83	; 0x53
 8000afe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b08:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b14:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b20:	483a      	ldr	r0, [pc, #232]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b22:	f004 fad6 	bl	80050d2 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b2c:	f000 fc16 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4833      	ldr	r0, [pc, #204]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b40:	f005 fbf2 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b4a:	f000 fc07 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4826      	ldr	r0, [pc, #152]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b74:	f004 ff16 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000b7e:	f000 fbed 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	2204      	movs	r2, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000b8c:	f004 ff0a 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 fbe1 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481a      	ldr	r0, [pc, #104]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000ba4:	f004 fefe 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000bae:	f000 fbd5 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4814      	ldr	r0, [pc, #80]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000bbc:	f004 fef2 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000bc6:	f000 fbc9 	bl	800135c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4807      	ldr	r0, [pc, #28]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000bee:	f005 fc17 	bl	8006420 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000bf8:	f000 fbb0 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <MX_TIM1_Init+0x148>)
 8000bfe:	f002 f997 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8000c02:	bf00      	nop
 8000c04:	3748      	adds	r7, #72	; 0x48
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001ec 	.word	0x200001ec
 8000c10:	40010000 	.word	0x40010000

08000c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c3a:	2253      	movs	r2, #83	; 0x53
 8000c3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c46:	4a19      	ldr	r2, [pc, #100]	; (8000cac <MX_TIM2_Init+0x98>)
 8000c48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c56:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c58:	f004 f94c 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 fb7b 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4619      	mov	r1, r3
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c74:	f004 ff58 	bl	8005b28 <HAL_TIM_ConfigClockSource>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 fb6d 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM2_Init+0x94>)
 8000c90:	f005 fb4a 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c9a:	f000 fb5f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000234 	.word	0x20000234
 8000cac:	0001869f 	.word	0x0001869f

08000cb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 ff14 	bl	8007aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000cce:	4a21      	ldr	r2, [pc, #132]	; (8000d54 <MX_TIM3_Init+0xa4>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000d1e:	f004 fc05 	bl	800552c <HAL_TIM_Encoder_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d28:	f000 fb18 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_TIM3_Init+0xa0>)
 8000d3a:	f005 faf5 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d44:	f000 fb0a 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3730      	adds	r7, #48	; 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000027c 	.word	0x2000027c
 8000d54:	40000400 	.word	0x40000400

08000d58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2224      	movs	r2, #36	; 0x24
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fec0 	bl	8007aec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <MX_TIM5_Init+0xa4>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000da2:	2301      	movs	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000db2:	2301      	movs	r3, #1
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000dc6:	f004 fbb1 	bl	800552c <HAL_TIM_Encoder_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000dd0:	f000 fac4 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_TIM5_Init+0xa0>)
 8000de2:	f005 faa1 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000dec:	f000 fab6 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3730      	adds	r7, #48	; 0x30
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200002c4 	.word	0x200002c4
 8000dfc:	40000c00 	.word	0x40000c00

08000e00 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e10:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <MX_TIM7_Init+0x68>)
 8000e12:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e16:	2253      	movs	r2, #83	; 0x53
 8000e18:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e26:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e30:	f004 f860 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e3a:	f000 fa8f 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_TIM7_Init+0x64>)
 8000e4c:	f005 fa6c 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e56:	f000 fa81 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000030c 	.word	0x2000030c
 8000e68:	40001400 	.word	0x40001400

08000e6c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000e80:	4a16      	ldr	r2, [pc, #88]	; (8000edc <MX_TIM9_Init+0x70>)
 8000e82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000e86:	2253      	movs	r2, #83	; 0x53
 8000e88:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000e92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e96:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000ea6:	f004 f825 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000eb0:	f000 fa54 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM9_Init+0x6c>)
 8000ec0:	f004 fe32 	bl	8005b28 <HAL_TIM_ConfigClockSource>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000eca:	f000 fa47 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000354 	.word	0x20000354
 8000edc:	40014000 	.word	0x40014000

08000ee0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <MX_TIM10_Init+0x44>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000eec:	2253      	movs	r2, #83	; 0x53
 8000eee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f0c:	f003 fff2 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f16:	f000 fa21 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000039c 	.word	0x2000039c
 8000f24:	40014400 	.word	0x40014400

08000f28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <MX_TIM11_Init+0x44>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f34:	2253      	movs	r2, #83	; 0x53
 8000f36:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_TIM11_Init+0x40>)
 8000f54:	f003 ffce 	bl	8004ef4 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000f5e:	f000 f9fd 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003e4 	.word	0x200003e4
 8000f6c:	40014800 	.word	0x40014800

08000f70 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <MX_TIM12_Init+0x9c>)
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <MX_TIM12_Init+0xa0>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <MX_TIM12_Init+0x9c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM12_Init+0x9c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4199;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM12_Init+0x9c>)
 8000f9c:	f241 0267 	movw	r2, #4199	; 0x1067
 8000fa0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM12_Init+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM12_Init+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000fae:	4817      	ldr	r0, [pc, #92]	; (800100c <MX_TIM12_Init+0x9c>)
 8000fb0:	f004 f88f 	bl	80050d2 <HAL_TIM_PWM_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000fba:	f000 f9cf 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4000;
 8000fc2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM12_Init+0x9c>)
 8000fd8:	f004 fce4 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000fe2:	f000 f9bb 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM12_Init+0x9c>)
 8000fee:	f004 fcd9 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f000 f9b0 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM12_Init+0x9c>)
 8000ffe:	f001 ff97 	bl	8002f30 <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000042c 	.word	0x2000042c
 8001010:	40001800 	.word	0x40001800

08001014 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_TIM13_Init+0x40>)
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <MX_TIM13_Init+0x44>)
 800101c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 83;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_TIM13_Init+0x40>)
 8001020:	2253      	movs	r2, #83	; 0x53
 8001022:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_TIM13_Init+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_TIM13_Init+0x40>)
 800102c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001030:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_TIM13_Init+0x40>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_TIM13_Init+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM13_Init+0x40>)
 8001040:	f003 ff58 	bl	8004ef4 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800104a:	f000 f987 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000474 	.word	0x20000474
 8001058:	40001c00 	.word	0x40001c00

0800105c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_UART5_Init+0x48>)
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <MX_UART5_Init+0x4c>)
 8001064:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 500000;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_UART5_Init+0x48>)
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <MX_UART5_Init+0x50>)
 800106a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_UART5_Init+0x48>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_UART5_Init+0x48>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_UART5_Init+0x48>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_UART5_Init+0x48>)
 8001080:	220c      	movs	r2, #12
 8001082:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_UART5_Init+0x48>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_UART5_Init+0x48>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_UART5_Init+0x48>)
 8001092:	f005 fa2b 	bl	80064ec <HAL_UART_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_UART5_Init+0x44>
  {
    Error_Handler();
 800109c:	f000 f95e 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200004bc 	.word	0x200004bc
 80010a8:	40005000 	.word	0x40005000
 80010ac:	0007a120 	.word	0x0007a120

080010b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART3_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART3_UART_Init+0x4c>)
 80010e8:	f005 fa00 	bl	80064ec <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f933 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000500 	.word	0x20000500
 8001100:	40004800 	.word	0x40004800

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_DMA_Init+0x4c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <MX_DMA_Init+0x4c>)
 8001114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <MX_DMA_Init+0x4c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	200c      	movs	r0, #12
 800112c:	f002 fae3 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001130:	200c      	movs	r0, #12
 8001132:	f002 fafc 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200e      	movs	r0, #14
 800113c:	f002 fadb 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001140:	200e      	movs	r0, #14
 8001142:	f002 faf4 	bl	800372e <HAL_NVIC_EnableIRQ>

}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b77      	ldr	r3, [pc, #476]	; (800134c <MX_GPIO_Init+0x1f8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a76      	ldr	r2, [pc, #472]	; (800134c <MX_GPIO_Init+0x1f8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b74      	ldr	r3, [pc, #464]	; (800134c <MX_GPIO_Init+0x1f8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b70      	ldr	r3, [pc, #448]	; (800134c <MX_GPIO_Init+0x1f8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a6f      	ldr	r2, [pc, #444]	; (800134c <MX_GPIO_Init+0x1f8>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b6d      	ldr	r3, [pc, #436]	; (800134c <MX_GPIO_Init+0x1f8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b69      	ldr	r3, [pc, #420]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a68      	ldr	r2, [pc, #416]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b66      	ldr	r3, [pc, #408]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b62      	ldr	r3, [pc, #392]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a61      	ldr	r2, [pc, #388]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b5f      	ldr	r3, [pc, #380]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a5a      	ldr	r2, [pc, #360]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b58      	ldr	r3, [pc, #352]	; (800134c <MX_GPIO_Init+0x1f8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	4855      	ldr	r0, [pc, #340]	; (8001350 <MX_GPIO_Init+0x1fc>)
 80011fc:	f003 f860 	bl	80042c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8001206:	4853      	ldr	r0, [pc, #332]	; (8001354 <MX_GPIO_Init+0x200>)
 8001208:	f003 f85a 	bl	80042c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001212:	4851      	ldr	r0, [pc, #324]	; (8001358 <MX_GPIO_Init+0x204>)
 8001214:	f003 f854 	bl	80042c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8;
 8001218:	f242 130c 	movw	r3, #8460	; 0x210c
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4849      	ldr	r0, [pc, #292]	; (8001354 <MX_GPIO_Init+0x200>)
 8001230:	f002 fe9a 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001234:	2303      	movs	r3, #3
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4842      	ldr	r0, [pc, #264]	; (8001354 <MX_GPIO_Init+0x200>)
 800124a:	f002 fe8d 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4839      	ldr	r0, [pc, #228]	; (8001350 <MX_GPIO_Init+0x1fc>)
 800126a:	f002 fe7d 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800126e:	2320      	movs	r3, #32
 8001270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001272:	2301      	movs	r3, #1
 8001274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	4832      	ldr	r0, [pc, #200]	; (8001350 <MX_GPIO_Init+0x1fc>)
 8001286:	f002 fe6f 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800128a:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	482c      	ldr	r0, [pc, #176]	; (8001354 <MX_GPIO_Init+0x200>)
 80012a4:	f002 fe60 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80012a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <MX_GPIO_Init+0x204>)
 80012c2:	f002 fe51 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	481d      	ldr	r0, [pc, #116]	; (8001354 <MX_GPIO_Init+0x200>)
 80012de:	f002 fe43 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_GPIO_Init+0x204>)
 80012f8:	f002 fe36 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_GPIO_Init+0x204>)
 8001310:	f002 fe2a 	bl	8003f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2008      	movs	r0, #8
 800131a:	f002 f9ec 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800131e:	2008      	movs	r0, #8
 8001320:	f002 fa05 	bl	800372e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2100      	movs	r1, #0
 8001328:	2009      	movs	r0, #9
 800132a:	f002 f9e4 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800132e:	2009      	movs	r0, #9
 8001330:	f002 f9fd 	bl	800372e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2028      	movs	r0, #40	; 0x28
 800133a:	f002 f9dc 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800133e:	2028      	movs	r0, #40	; 0x28
 8001340:	f002 f9f5 	bl	800372e <HAL_NVIC_EnableIRQ>

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020800 	.word	0x40020800
 8001358:	40020400 	.word	0x40020400

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <setup>:
int test = 0;
int script = 0;
int script_angle[4];
int tim12 = 0;

void setup(){
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	DCmotor_setup();
 800136c:	f000 ff56 	bl	800221c <_Z13DCmotor_setupv>
	servo_setup();
 8001370:	f001 faa8 	bl	80028c4 <_Z11servo_setupv>
	HAL_TIM_Base_Start_IT(&htim7);
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <setup+0x2c>)
 8001376:	f003 fe0d 	bl	8004f94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim10);
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <setup+0x30>)
 800137c:	f003 fe0a 	bl	8004f94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <setup+0x34>)
 8001382:	f003 fe07 	bl	8004f94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <setup+0x38>)
 8001388:	f003 fe04 	bl	8004f94 <HAL_TIM_Base_Start_IT>
	UART_setup();
 800138c:	f7ff fa06 	bl	800079c <_Z10UART_setupv>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000030c 	.word	0x2000030c
 8001398:	2000039c 	.word	0x2000039c
 800139c:	200003e4 	.word	0x200003e4
 80013a0:	20000474 	.word	0x20000474

080013a4 <divide>:

int divide(int times,int *count){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]

	if (*count > times){
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	da04      	bge.n	80013c2 <divide+0x1e>
		*count = 0;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
		return 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <divide+0x20>

	}else{
		return 0;
 80013c2:	2300      	movs	r3, #0
	}
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <wait>:

void wait(int time){//time單位為ms
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(&htim13);
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <wait+0x30>)
 80013da:	f003 fddb 	bl	8004f94 <HAL_TIM_Base_Start_IT>

	while(delay_count < time){
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <wait+0x34>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dd00      	ble.n	80013ea <wait+0x1a>
 80013e8:	e7f9      	b.n	80013de <wait+0xe>
	}

	HAL_TIM_Base_Stop_IT(&htim13);
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <wait+0x30>)
 80013ec:	f003 fe42 	bl	8005074 <HAL_TIM_Base_Stop_IT>

	delay_count = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <wait+0x34>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000474 	.word	0x20000474
 8001404:	20000604 	.word	0x20000604

08001408 <main_function>:
void main_function(){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	while(1){
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET){
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	4857      	ldr	r0, [pc, #348]	; (800156c <main_function+0x164>)
 8001410:	f002 ff3e 	bl	8004290 <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2301      	movne	r3, #1
 800141c:	2300      	moveq	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <main_function+0x24>
		test = 1;
 8001424:	4b52      	ldr	r3, [pc, #328]	; (8001570 <main_function+0x168>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET){
 800142a:	e7ef      	b.n	800140c <main_function+0x4>
	}
	test = 0;
 800142c:	4b50      	ldr	r3, [pc, #320]	; (8001570 <main_function+0x168>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	Cascade( 6, 2);
 8001432:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001436:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800143a:	f000 fa51 	bl	80018e0 <_Z7Cascadeff>

	switch (script) {
 800143e:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <main_function+0x16c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d8e2      	bhi.n	800140c <main_function+0x4>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <main_function+0x44>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	08001461 	.word	0x08001461
 8001450:	08001467 	.word	0x08001467
 8001454:	08001475 	.word	0x08001475
 8001458:	08001547 	.word	0x08001547
 800145c:	08001565 	.word	0x08001565
		case(0)://一開始走右邊

			mission_1_R();
 8001460:	f000 fafe 	bl	8001a60 <_Z11mission_1_Rv>
			break;
 8001464:	e081      	b.n	800156a <main_function+0x162>
		case(1)://一開始走左邊

			mission_1_L();
 8001466:	f000 fbd3 	bl	8001c10 <_Z11mission_1_Lv>
			mission_2();
 800146a:	f000 fd07 	bl	8001e7c <_Z9mission_2v>
			mission_3();
 800146e:	f000 fde7 	bl	8002040 <_Z9mission_3v>
			break;
 8001472:	e07a      	b.n	800156a <main_function+0x162>
		case(2)://夾玩球沒過重製，從起點直接往前走

			GoTo( 1, 0, 220, 0);
 8001474:	eddf 1a40 	vldr	s3, [pc, #256]	; 8001578 <main_function+0x170>
 8001478:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800157c <main_function+0x174>
 800147c:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8001578 <main_function+0x170>
 8001480:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001484:	f000 fa00 	bl	8001888 <_Z4GoToffff>

			//middle find line(f)
			GoTo( 4, 2, 1, 0);
 8001488:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8001578 <main_function+0x170>
 800148c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001490:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001494:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001498:	f000 f9f6 	bl	8001888 <_Z4GoToffff>

			//front spin find line(t)
			GoTo( 4, 5, 1, 0);
 800149c:	eddf 1a36 	vldr	s3, [pc, #216]	; 8001578 <main_function+0x170>
 80014a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80014a4:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80014a8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80014ac:	f000 f9ec 	bl	8001888 <_Z4GoToffff>

			//find right line
			GoTo( 4, 5, 1, 0);
 80014b0:	eddf 1a31 	vldr	s3, [pc, #196]	; 8001578 <main_function+0x170>
 80014b4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80014b8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80014bc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80014c0:	f000 f9e2 	bl	8001888 <_Z4GoToffff>

			GoTo( 5, 0, 0, 90);
 80014c4:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8001580 <main_function+0x178>
 80014c8:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001578 <main_function+0x170>
 80014cc:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001578 <main_function+0x170>
 80014d0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80014d4:	f000 f9d8 	bl	8001888 <_Z4GoToffff>

			GoTo( 2, 0, 0, 0);
 80014d8:	eddf 1a27 	vldr	s3, [pc, #156]	; 8001578 <main_function+0x170>
 80014dc:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001578 <main_function+0x170>
 80014e0:	eddf 0a25 	vldr	s1, [pc, #148]	; 8001578 <main_function+0x170>
 80014e4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80014e8:	f000 f9ce 	bl	8001888 <_Z4GoToffff>

			GoTo( 1, 0, 290, 0);
 80014ec:	eddf 1a22 	vldr	s3, [pc, #136]	; 8001578 <main_function+0x170>
 80014f0:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8001584 <main_function+0x17c>
 80014f4:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001578 <main_function+0x170>
 80014f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80014fc:	f000 f9c4 	bl	8001888 <_Z4GoToffff>

			//middle find line(f)
			GoTo( 4, 2, 1, 0);
 8001500:	eddf 1a1d 	vldr	s3, [pc, #116]	; 8001578 <main_function+0x170>
 8001504:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001508:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800150c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001510:	f000 f9ba 	bl	8001888 <_Z4GoToffff>

			//front spin find line(t)
			GoTo( 4, 8, 1, 0);
 8001514:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001578 <main_function+0x170>
 8001518:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800151c:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8001520:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001524:	f000 f9b0 	bl	8001888 <_Z4GoToffff>

			//reset
			GoTo( 5, 0, 147.5, 90);
 8001528:	eddf 1a15 	vldr	s3, [pc, #84]	; 8001580 <main_function+0x178>
 800152c:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001588 <main_function+0x180>
 8001530:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001578 <main_function+0x170>
 8001534:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001538:	f000 f9a6 	bl	8001888 <_Z4GoToffff>

			mission_2();
 800153c:	f000 fc9e 	bl	8001e7c <_Z9mission_2v>
			mission_3();
 8001540:	f000 fd7e 	bl	8002040 <_Z9mission_3v>
			break;
 8001544:	e011      	b.n	800156a <main_function+0x162>

		case(3)://夾完球過重製，從第三關前重置點開始

			//find left line(f)
			GoTo( 4, 6, 1, 0);
 8001546:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8001578 <main_function+0x170>
 800154a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800154e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001552:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001556:	f000 f997 	bl	8001888 <_Z4GoToffff>

			mission_2();
 800155a:	f000 fc8f 	bl	8001e7c <_Z9mission_2v>
			mission_3();
 800155e:	f000 fd6f 	bl	8002040 <_Z9mission_3v>
			break;
 8001562:	e002      	b.n	800156a <main_function+0x162>

		case(4)://第五關S型前重置開始
			mission_3();
 8001564:	f000 fd6c 	bl	8002040 <_Z9mission_3v>
			break;
 8001568:	bf00      	nop
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET){
 800156a:	e74f      	b.n	800140c <main_function+0x4>
 800156c:	40020400 	.word	0x40020400
 8001570:	20000614 	.word	0x20000614
 8001574:	20000618 	.word	0x20000618
 8001578:	00000000 	.word	0x00000000
 800157c:	435c0000 	.word	0x435c0000
 8001580:	42b40000 	.word	0x42b40000
 8001584:	43910000 	.word	0x43910000
 8001588:	43138000 	.word	0x43138000

0800158c <TEST_MODE>:
		}
		//break;
	}
}

void TEST_MODE(){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	SERVO_TEST();
 8001590:	f001 fafa 	bl	8002b88 <_Z10SERVO_TESTv>
	DCMOTOR_TEST();
 8001594:	f001 f920 	bl	80027d8 <_Z12DCMOTOR_TESTv>
	if(divide(100,&divide_100_count)){
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <TEST_MODE+0x2c>)
 800159a:	2064      	movs	r0, #100	; 0x64
 800159c:	f7ff ff02 	bl	80013a4 <divide>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <TEST_MODE+0x28>
		ARM_RUN();
 80015b0:	f7ff f848 	bl	8000644 <_Z7ARM_RUNv>
		}
	}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000060c 	.word	0x2000060c

080015bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM7){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d133      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x7a>
		divide_10_count++;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a20      	ldr	r2, [pc, #128]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015d6:	6013      	str	r3, [r2, #0]
		divide_100_count++;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015e0:	6013      	str	r3, [r2, #0]
		if(test == true){
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d102      	bne.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0x34>
			TEST_MODE();
 80015ea:	f7ff ffcf 	bl	800158c <TEST_MODE>
 80015ee:	e022      	b.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x7a>
		}else if(test != true){
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d01e      	beq.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x7a>


			timer++;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001600:	6013      	str	r3, [r2, #0]

			blockState();//
 8001602:	f001 fa37 	bl	8002a74 <_Z10blockStatev>
			DCmotor_run();
 8001606:	f001 f863 	bl	80026d0 <_Z11DCmotor_runv>
			//ARM_RUN();
			if(divide(10,&divide_10_count)){
 800160a:	4913      	ldr	r1, [pc, #76]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800160c:	200a      	movs	r0, #10
 800160e:	f7ff fec9 	bl	80013a4 <divide>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0

			}
			if(divide(100,&divide_100_count)){
 8001616:	4911      	ldr	r1, [pc, #68]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001618:	2064      	movs	r0, #100	; 0x64
 800161a:	f7ff fec3 	bl	80013a4 <divide>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x7a>
				UART_TRANSMIT();
 800162e:	f7ff f901 	bl	8000834 <_Z13UART_TRANSMITv>
				ARM_RUN();
 8001632:	f7ff f807 	bl	8000644 <_Z7ARM_RUNv>

			}
		}
	}

	if (htim -> Instance == TIM13){
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d104      	bne.n	800164a <HAL_TIM_PeriodElapsedCallback+0x8e>
		delay_count++;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001648:	6013      	str	r3, [r2, #0]
	}
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40001400 	.word	0x40001400
 8001658:	20000608 	.word	0x20000608
 800165c:	2000060c 	.word	0x2000060c
 8001660:	20000614 	.word	0x20000614
 8001664:	20000610 	.word	0x20000610
 8001668:	40001c00 	.word	0x40001c00
 800166c:	20000604 	.word	0x20000604

08001670 <_Z5resett>:

void reset(uint16_t GPIO_Pin){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001680:	d010      	beq.n	80016a4 <_Z5resett+0x34>
 8001682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001686:	f300 80cf 	bgt.w	8001828 <_Z5resett+0x1b8>
 800168a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168e:	f000 809b 	beq.w	80017c8 <_Z5resett+0x158>
 8001692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001696:	f300 80c7 	bgt.w	8001828 <_Z5resett+0x1b8>
 800169a:	2b04      	cmp	r3, #4
 800169c:	d033      	beq.n	8001706 <_Z5resett+0x96>
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d062      	beq.n	8001768 <_Z5resett+0xf8>
    	servoBM.block_state = 0;
    	 }
    break;
    default:
    	//script = 0;
    break;
 80016a2:	e0c1      	b.n	8001828 <_Z5resett+0x1b8>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4866      	ldr	r0, [pc, #408]	; (8001844 <_Z5resett+0x1d4>)
 80016aa:	f002 fdf1 	bl	8004290 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 80b6 	beq.w	800182c <_Z5resett+0x1bc>
    	script = 1;
 80016c0:	4b61      	ldr	r3, [pc, #388]	; (8001848 <_Z5resett+0x1d8>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    	Arms[0].ARM_POS = 3;
 80016c6:	4b61      	ldr	r3, [pc, #388]	; (800184c <_Z5resett+0x1dc>)
 80016c8:	2203      	movs	r2, #3
 80016ca:	61da      	str	r2, [r3, #28]
    	Arms[1].ARM_POS = 3;
 80016cc:	4b5f      	ldr	r3, [pc, #380]	; (800184c <_Z5resett+0x1dc>)
 80016ce:	2203      	movs	r2, #3
 80016d0:	64da      	str	r2, [r3, #76]	; 0x4c
    	Arms[0].claw_state = true;
 80016d2:	4b5e      	ldr	r3, [pc, #376]	; (800184c <_Z5resett+0x1dc>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	761a      	strb	r2, [r3, #24]
    	Arms[1].claw_state = true;;
 80016d8:	4b5c      	ldr	r3, [pc, #368]	; (800184c <_Z5resett+0x1dc>)
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    	lifters[0].goalLocation = 1;
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <_Z5resett+0x1e0>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	611a      	str	r2, [r3, #16]
    	lifters[1].goalLocation = 1;
 80016e6:	4b5a      	ldr	r3, [pc, #360]	; (8001850 <_Z5resett+0x1e0>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
    	servoFR.block_state = 0;
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <_Z5resett+0x1e4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	745a      	strb	r2, [r3, #17]
    	servoBR.block_state = 0;
 80016f2:	4b59      	ldr	r3, [pc, #356]	; (8001858 <_Z5resett+0x1e8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	745a      	strb	r2, [r3, #17]
    	servoFM.block_state = 0;
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <_Z5resett+0x1ec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	745a      	strb	r2, [r3, #17]
    	servoBM.block_state = 0;
 80016fe:	4b58      	ldr	r3, [pc, #352]	; (8001860 <_Z5resett+0x1f0>)
 8001700:	2200      	movs	r2, #0
 8001702:	745a      	strb	r2, [r3, #17]
    break;
 8001704:	e092      	b.n	800182c <_Z5resett+0x1bc>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4619      	mov	r1, r3
 800170a:	484e      	ldr	r0, [pc, #312]	; (8001844 <_Z5resett+0x1d4>)
 800170c:	f002 fdc0 	bl	8004290 <HAL_GPIO_ReadPin>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf0c      	ite	eq
 8001716:	2301      	moveq	r3, #1
 8001718:	2300      	movne	r3, #0
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8087 	beq.w	8001830 <_Z5resett+0x1c0>
    	script = 2;
 8001722:	4b49      	ldr	r3, [pc, #292]	; (8001848 <_Z5resett+0x1d8>)
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
    	Arms[0].ARM_POS = 3;
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <_Z5resett+0x1dc>)
 800172a:	2203      	movs	r2, #3
 800172c:	61da      	str	r2, [r3, #28]
    	Arms[1].ARM_POS = 3;
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <_Z5resett+0x1dc>)
 8001730:	2203      	movs	r2, #3
 8001732:	64da      	str	r2, [r3, #76]	; 0x4c
    	Arms[0].claw_state = true;
 8001734:	4b45      	ldr	r3, [pc, #276]	; (800184c <_Z5resett+0x1dc>)
 8001736:	2201      	movs	r2, #1
 8001738:	761a      	strb	r2, [r3, #24]
    	Arms[1].claw_state = true;;
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <_Z5resett+0x1dc>)
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    	lifters[0].goalLocation = 1;
 8001742:	4b43      	ldr	r3, [pc, #268]	; (8001850 <_Z5resett+0x1e0>)
 8001744:	2201      	movs	r2, #1
 8001746:	611a      	str	r2, [r3, #16]
    	lifters[1].goalLocation = 1;
 8001748:	4b41      	ldr	r3, [pc, #260]	; (8001850 <_Z5resett+0x1e0>)
 800174a:	2201      	movs	r2, #1
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
    	servoFR.block_state = 0;
 800174e:	4b41      	ldr	r3, [pc, #260]	; (8001854 <_Z5resett+0x1e4>)
 8001750:	2200      	movs	r2, #0
 8001752:	745a      	strb	r2, [r3, #17]
    	servoBR.block_state = 0;
 8001754:	4b40      	ldr	r3, [pc, #256]	; (8001858 <_Z5resett+0x1e8>)
 8001756:	2200      	movs	r2, #0
 8001758:	745a      	strb	r2, [r3, #17]
    	servoFM.block_state = 0;
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <_Z5resett+0x1ec>)
 800175c:	2200      	movs	r2, #0
 800175e:	745a      	strb	r2, [r3, #17]
    	servoBM.block_state = 0;
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <_Z5resett+0x1f0>)
 8001762:	2200      	movs	r2, #0
 8001764:	745a      	strb	r2, [r3, #17]
    break;
 8001766:	e063      	b.n	8001830 <_Z5resett+0x1c0>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	4619      	mov	r1, r3
 800176c:	4835      	ldr	r0, [pc, #212]	; (8001844 <_Z5resett+0x1d4>)
 800176e:	f002 fd8f 	bl	8004290 <HAL_GPIO_ReadPin>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d058      	beq.n	8001834 <_Z5resett+0x1c4>
    	script = 3;
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <_Z5resett+0x1d8>)
 8001784:	2203      	movs	r2, #3
 8001786:	601a      	str	r2, [r3, #0]
    	Arms[0].ARM_POS = 3;
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <_Z5resett+0x1dc>)
 800178a:	2203      	movs	r2, #3
 800178c:	61da      	str	r2, [r3, #28]
    	Arms[1].ARM_POS = 3;
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <_Z5resett+0x1dc>)
 8001790:	2203      	movs	r2, #3
 8001792:	64da      	str	r2, [r3, #76]	; 0x4c
    	Arms[0].claw_state = true;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <_Z5resett+0x1dc>)
 8001796:	2201      	movs	r2, #1
 8001798:	761a      	strb	r2, [r3, #24]
    	Arms[1].claw_state = true;;
 800179a:	4b2c      	ldr	r3, [pc, #176]	; (800184c <_Z5resett+0x1dc>)
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    	lifters[0].goalLocation = 1;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <_Z5resett+0x1e0>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
    	lifters[1].goalLocation = 1;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <_Z5resett+0x1e0>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
    	servoFR.block_state = 0;
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <_Z5resett+0x1e4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	745a      	strb	r2, [r3, #17]
    	servoBR.block_state = 0;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <_Z5resett+0x1e8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	745a      	strb	r2, [r3, #17]
    	servoFM.block_state = 0;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <_Z5resett+0x1ec>)
 80017bc:	2200      	movs	r2, #0
 80017be:	745a      	strb	r2, [r3, #17]
    	servoBM.block_state = 0;
 80017c0:	4b27      	ldr	r3, [pc, #156]	; (8001860 <_Z5resett+0x1f0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	745a      	strb	r2, [r3, #17]
    break;
 80017c6:	e035      	b.n	8001834 <_Z5resett+0x1c4>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_RESET){
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	4619      	mov	r1, r3
 80017cc:	481d      	ldr	r0, [pc, #116]	; (8001844 <_Z5resett+0x1d4>)
 80017ce:	f002 fd5f 	bl	8004290 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d02a      	beq.n	8001838 <_Z5resett+0x1c8>
    	script = 4;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <_Z5resett+0x1d8>)
 80017e4:	2204      	movs	r2, #4
 80017e6:	601a      	str	r2, [r3, #0]
    	Arms[0].ARM_POS = 2;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <_Z5resett+0x1dc>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	61da      	str	r2, [r3, #28]
    	Arms[1].ARM_POS = 2;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <_Z5resett+0x1dc>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	64da      	str	r2, [r3, #76]	; 0x4c
    	Arms[0].claw_state = true;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <_Z5resett+0x1dc>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	761a      	strb	r2, [r3, #24]
    	Arms[1].claw_state = true;;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <_Z5resett+0x1dc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    	lifters[0].goalLocation = 1;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_Z5resett+0x1e0>)
 8001804:	2201      	movs	r2, #1
 8001806:	611a      	str	r2, [r3, #16]
    	lifters[1].goalLocation = 1;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_Z5resett+0x1e0>)
 800180a:	2201      	movs	r2, #1
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
    	servoFR.block_state = 0;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <_Z5resett+0x1e4>)
 8001810:	2200      	movs	r2, #0
 8001812:	745a      	strb	r2, [r3, #17]
    	servoBR.block_state = 0;
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_Z5resett+0x1e8>)
 8001816:	2200      	movs	r2, #0
 8001818:	745a      	strb	r2, [r3, #17]
    	servoFM.block_state = 0;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_Z5resett+0x1ec>)
 800181c:	2200      	movs	r2, #0
 800181e:	745a      	strb	r2, [r3, #17]
    	servoBM.block_state = 0;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <_Z5resett+0x1f0>)
 8001822:	2200      	movs	r2, #0
 8001824:	745a      	strb	r2, [r3, #17]
    break;
 8001826:	e007      	b.n	8001838 <_Z5resett+0x1c8>
    break;
 8001828:	bf00      	nop
 800182a:	e006      	b.n	800183a <_Z5resett+0x1ca>
    break;
 800182c:	bf00      	nop
 800182e:	e004      	b.n	800183a <_Z5resett+0x1ca>
    break;
 8001830:	bf00      	nop
 8001832:	e002      	b.n	800183a <_Z5resett+0x1ca>
    break;
 8001834:	bf00      	nop
 8001836:	e000      	b.n	800183a <_Z5resett+0x1ca>
    break;
 8001838:	bf00      	nop
	}
	}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40020800 	.word	0x40020800
 8001848:	20000618 	.word	0x20000618
 800184c:	20000004 	.word	0x20000004
 8001850:	200000f4 	.word	0x200000f4
 8001854:	20000134 	.word	0x20000134
 8001858:	20000150 	.word	0x20000150
 800185c:	2000016c 	.word	0x2000016c
 8001860:	20000188 	.word	0x20000188

08001864 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
	updateLocation(GPIO_Pin);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fe3f 	bl	80024f4 <_Z14updateLocationt>
    reset(GPIO_Pin);
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fef9 	bl	8001670 <_Z5resett>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <_Z4GoToffff>:
extern int target_Location[2];

float statusData[4] = { 0, 0, 0, 0};

//Mode:1:path/ 2:/integral/ 3::stop/ 4:find line/ 5:reset
void GoTo(float Mode, float x, float y, float ang){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001892:	edc7 0a02 	vstr	s1, [r7, #8]
 8001896:	ed87 1a01 	vstr	s2, [r7, #4]
 800189a:	edc7 1a00 	vstr	s3, [r7]


	statusData[0] = Mode;
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <_Z4GoToffff+0x50>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6013      	str	r3, [r2, #0]
	statusData[1] = x;
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <_Z4GoToffff+0x50>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6053      	str	r3, [r2, #4]
	statusData[2] = y;
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <_Z4GoToffff+0x50>)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6093      	str	r3, [r2, #8]
	statusData[3] = ang;
 80018b0:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <_Z4GoToffff+0x50>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	60d3      	str	r3, [r2, #12]
	UART_TRANSMIT();
 80018b6:	f7fe ffbd 	bl	8000834 <_Z13UART_TRANSMITv>
	wait(100);
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	f7ff fd88 	bl	80013d0 <wait>
	arrive = 0;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <_Z4GoToffff+0x54>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	while(!arrive){}
 80018c6:	4b05      	ldr	r3, [pc, #20]	; (80018dc <_Z4GoToffff+0x54>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <_Z4GoToffff+0x48>
 80018ce:	e7fa      	b.n	80018c6 <_Z4GoToffff+0x3e>
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000061c 	.word	0x2000061c
 80018dc:	200001e1 	.word	0x200001e1

080018e0 <_Z7Cascadeff>:
//Mode:6:cascade / state_1 1:down 0:up
//Mode:7:casdcade servo  / state_1 1:open 0:close
void Cascade(float Mode, float state_1){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80018ea:	edc7 0a00 	vstr	s1, [r7]

	statusData[0] = Mode;
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <_Z7Cascadeff+0x4c>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6013      	str	r3, [r2, #0]
	statusData[1] = state_1;
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <_Z7Cascadeff+0x4c>)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6053      	str	r3, [r2, #4]
	statusData[2] = 0;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <_Z7Cascadeff+0x4c>)
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
	statusData[3] = 0;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <_Z7Cascadeff+0x4c>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	60da      	str	r2, [r3, #12]

	UART_TRANSMIT();
 800190a:	f7fe ff93 	bl	8000834 <_Z13UART_TRANSMITv>
	wait(100);
 800190e:	2064      	movs	r0, #100	; 0x64
 8001910:	f7ff fd5e 	bl	80013d0 <wait>
	arrive = 0;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <_Z7Cascadeff+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]

	while(!arrive){}
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <_Z7Cascadeff+0x50>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <_Z7Cascadeff+0x44>
 8001922:	e7fa      	b.n	800191a <_Z7Cascadeff+0x3a>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000061c 	.word	0x2000061c
 8001930:	200001e1 	.word	0x200001e1

08001934 <_Z8takeBalli>:
	update_blockstate(&servoFR, 0);
	update_blockstate(&servoBR, 0);
	update_blockstate(&servoFM, 0);
	update_blockstate(&servoBM, 0);
}
void takeBall(int arm){
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

	int a = arm;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60fb      	str	r3, [r7, #12]

	//takeball
	upadate_pos(&Arms[a], 0);
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <_Z8takeBalli+0xb0>)
 800194c:	4413      	add	r3, r2
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe ff01 	bl	8000758 <_Z11upadate_posP3Armi>
	//open claw
	update_claw(&Arms[a], 0);
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <_Z8takeBalli+0xb0>)
 8001962:	4413      	add	r3, r2
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe ff06 	bl	8000778 <_Z11update_clawP3Armb>
	//claw down
	setTargetLocation(&lifters[a], 0);
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <_Z8takeBalli+0xb4>)
 8001978:	4413      	add	r3, r2
 800197a:	2100      	movs	r1, #0
 800197c:	4618      	mov	r0, r3
 800197e:	f000 ff15 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	//close claw
	update_claw(&Arms[a], 1);
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <_Z8takeBalli+0xb0>)
 800198e:	4413      	add	r3, r2
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fef0 	bl	8000778 <_Z11update_clawP3Armb>

	//claw up
	setTargetLocation(&lifters[a], 1);
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <_Z8takeBalli+0xb4>)
 80019a4:	4413      	add	r3, r2
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f000 feff 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	//place on robot
	upadate_pos(&Arms[a], 1);
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <_Z8takeBalli+0xb0>)
 80019ba:	4413      	add	r3, r2
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe feca 	bl	8000758 <_Z11upadate_posP3Armi>
	//open claw
	update_claw(&Arms[a], 0);
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <_Z8takeBalli+0xb0>)
 80019d0:	4413      	add	r3, r2
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fecf 	bl	8000778 <_Z11update_clawP3Armb>
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000004 	.word	0x20000004
 80019e8:	200000f4 	.word	0x200000f4

080019ec <_Z9placeBalli>:
void placeBall(int arm){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

	int a = arm;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60fb      	str	r3, [r7, #12]

	GoTo( 3, 0, 0, 0);
 80019f8:	eddf 1a17 	vldr	s3, [pc, #92]	; 8001a58 <_Z9placeBalli+0x6c>
 80019fc:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001a58 <_Z9placeBalli+0x6c>
 8001a00:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001a58 <_Z9placeBalli+0x6c>
 8001a04:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001a08:	f7ff ff3e 	bl	8001888 <_Z4GoToffff>

	upadate_pos(&Arms[a], 2);
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <_Z9placeBalli+0x70>)
 8001a18:	4413      	add	r3, r2
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fe9b 	bl	8000758 <_Z11upadate_posP3Armi>
	update_claw(&Arms[a], 0);
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <_Z9placeBalli+0x70>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fea0 	bl	8000778 <_Z11update_clawP3Armb>
	upadate_pos(&Arms[a], 1);
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <_Z9placeBalli+0x70>)
 8001a44:	4413      	add	r3, r2
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fe85 	bl	8000758 <_Z11upadate_posP3Armi>
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	20000004 	.word	0x20000004

08001a60 <_Z11mission_1_Rv>:

void mission_1_R(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0

	//find cross(f)
	GoTo( 4, 3, 1, 0);
 8001a64:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001a6c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001a70:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001a74:	f7ff ff08 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 90);
 8001a78:	eddf 1a57 	vldr	s3, [pc, #348]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001a7c:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a80:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a84:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001a88:	f7ff fefe 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 0);
 8001a8c:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a90:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a94:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001a98:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001a9c:	f7ff fef4 	bl	8001888 <_Z4GoToffff>

	GoTo( 1, 0, 100.5, 0);
 8001aa0:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001aa4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8001bdc <_Z11mission_1_Rv+0x17c>
 8001aa8:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001aac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ab0:	f7ff feea 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 0);
 8001ab4:	eddf 1a47 	vldr	s3, [pc, #284]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ab8:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001abc:	eddf 0a45 	vldr	s1, [pc, #276]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ac0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001ac4:	f7ff fee0 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 91);
 8001ac8:	eddf 1a45 	vldr	s3, [pc, #276]	; 8001be0 <_Z11mission_1_Rv+0x180>
 8001acc:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ad0:	eddf 0a40 	vldr	s1, [pc, #256]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ad4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ad8:	f7ff fed6 	bl	8001888 <_Z4GoToffff>

	//R-1
	GoTo( 5, 0, 0, 90);
 8001adc:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001ae0:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ae4:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ae8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001aec:	f7ff fecc 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, craw_to_middle, 90);
 8001af0:	eddf 1a39 	vldr	s3, [pc, #228]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001af4:	eeb2 1a0a 	vmov.f32	s2, #42	; 0x41500000  13.0
 8001af8:	eddf 0a36 	vldr	s1, [pc, #216]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001afc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b00:	f7ff fec2 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoBR, 1);
 8001b04:	2101      	movs	r1, #1
 8001b06:	4837      	ldr	r0, [pc, #220]	; (8001be4 <_Z11mission_1_Rv+0x184>)
 8001b08:	f001 f82e 	bl	8002b68 <_Z17update_blockstateP5servob>
	update_blockstate(&servoBM, 1);
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	4836      	ldr	r0, [pc, #216]	; (8001be8 <_Z11mission_1_Rv+0x188>)
 8001b10:	f001 f82a 	bl	8002b68 <_Z17update_blockstateP5servob>
	takeBall(1);
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ff0d 	bl	8001934 <_Z8takeBalli>
	wait(500);
 8001b1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b1e:	f7ff fc57 	bl	80013d0 <wait>
	update_blockstate(&servoBM, 0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	4830      	ldr	r0, [pc, #192]	; (8001be8 <_Z11mission_1_Rv+0x188>)
 8001b26:	f001 f81f 	bl	8002b68 <_Z17update_blockstateP5servob>

	//R-2
	GoTo( 2, 0, 100 - craw_to_middle, 90);
 8001b2a:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001b2e:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8001bec <_Z11mission_1_Rv+0x18c>
 8001b32:	eddf 0a28 	vldr	s1, [pc, #160]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001b36:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b3a:	f7ff fea5 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoFR, 1);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	482b      	ldr	r0, [pc, #172]	; (8001bf0 <_Z11mission_1_Rv+0x190>)
 8001b42:	f001 f811 	bl	8002b68 <_Z17update_blockstateP5servob>
	update_blockstate(&servoFM, 1);
 8001b46:	2101      	movs	r1, #1
 8001b48:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <_Z11mission_1_Rv+0x194>)
 8001b4a:	f001 f80d 	bl	8002b68 <_Z17update_blockstateP5servob>
	takeBall(0);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff fef0 	bl	8001934 <_Z8takeBalli>
	wait(500);
 8001b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b58:	f7ff fc3a 	bl	80013d0 <wait>
	update_blockstate(&servoFM, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <_Z11mission_1_Rv+0x194>)
 8001b60:	f001 f802 	bl	8002b68 <_Z17update_blockstateP5servob>

	//R-3
	GoTo( 2, 0, 200 + craw_to_middle, 90);
 8001b64:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001b68:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001bf8 <_Z11mission_1_Rv+0x198>
 8001b6c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001b70:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001b74:	f7ff fe88 	bl	8001888 <_Z4GoToffff>

	//takeball
	upadate_pos(&Arms[1], 0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4820      	ldr	r0, [pc, #128]	; (8001bfc <_Z11mission_1_Rv+0x19c>)
 8001b7c:	f7fe fdec 	bl	8000758 <_Z11upadate_posP3Armi>
	//open claw
	update_claw(&Arms[1], 0);
 8001b80:	2100      	movs	r1, #0
 8001b82:	481e      	ldr	r0, [pc, #120]	; (8001bfc <_Z11mission_1_Rv+0x19c>)
 8001b84:	f7fe fdf8 	bl	8000778 <_Z11update_clawP3Armb>
	//claw down
	setTargetLocation(&lifters[1], 0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	481d      	ldr	r0, [pc, #116]	; (8001c00 <_Z11mission_1_Rv+0x1a0>)
 8001b8c:	f000 fe0e 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	//close claw
	update_claw(&Arms[1], 1);
 8001b90:	2101      	movs	r1, #1
 8001b92:	481a      	ldr	r0, [pc, #104]	; (8001bfc <_Z11mission_1_Rv+0x19c>)
 8001b94:	f7fe fdf0 	bl	8000778 <_Z11update_clawP3Armb>

	GoTo( 5, 0, 0, 90);
 8001b98:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001bd8 <_Z11mission_1_Rv+0x178>
 8001b9c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ba0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001ba4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001ba8:	f7ff fe6e 	bl	8001888 <_Z4GoToffff>

	//claw up
	setTargetLocation(&lifters[1], 1);
 8001bac:	2101      	movs	r1, #1
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <_Z11mission_1_Rv+0x1a0>)
 8001bb0:	f000 fdfc 	bl	80027ac <_Z17setTargetLocationP8DC_motori>

	GoTo( 2, 0, 123, 1000);
 8001bb4:	eddf 1a13 	vldr	s3, [pc, #76]	; 8001c04 <_Z11mission_1_Rv+0x1a4>
 8001bb8:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8001c08 <_Z11mission_1_Rv+0x1a8>
 8001bbc:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001bd4 <_Z11mission_1_Rv+0x174>
 8001bc0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001bc4:	f7ff fe60 	bl	8001888 <_Z4GoToffff>

	//open claw
	update_claw(&Arms[0], 0);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4810      	ldr	r0, [pc, #64]	; (8001c0c <_Z11mission_1_Rv+0x1ac>)
 8001bcc:	f7fe fdd4 	bl	8000778 <_Z11update_clawP3Armb>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	00000000 	.word	0x00000000
 8001bd8:	42b40000 	.word	0x42b40000
 8001bdc:	42c90000 	.word	0x42c90000
 8001be0:	42b60000 	.word	0x42b60000
 8001be4:	20000150 	.word	0x20000150
 8001be8:	20000188 	.word	0x20000188
 8001bec:	42ae0000 	.word	0x42ae0000
 8001bf0:	20000134 	.word	0x20000134
 8001bf4:	2000016c 	.word	0x2000016c
 8001bf8:	43550000 	.word	0x43550000
 8001bfc:	20000034 	.word	0x20000034
 8001c00:	2000010c 	.word	0x2000010c
 8001c04:	447a0000 	.word	0x447a0000
 8001c08:	42f60000 	.word	0x42f60000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <_Z11mission_1_Lv>:
void mission_1_L(){
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

	//find cross(f)
	GoTo( 4, 3, 1, 0);
 8001c14:	eddf 1a8a 	vldr	s3, [pc, #552]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c18:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001c1c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001c20:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001c24:	f7ff fe30 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 0);
 8001c28:	eddf 1a85 	vldr	s3, [pc, #532]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c2c:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c30:	eddf 0a83 	vldr	s1, [pc, #524]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c34:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c38:	f7ff fe26 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 91);
 8001c3c:	eddf 1a81 	vldr	s3, [pc, #516]	; 8001e44 <_Z11mission_1_Lv+0x234>
 8001c40:	ed9f 1a7f 	vldr	s2, [pc, #508]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c44:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c48:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001c4c:	f7ff fe1c 	bl	8001888 <_Z4GoToffff>

	GoTo( 1, 0, 100.5, 0);
 8001c50:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c54:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8001e48 <_Z11mission_1_Lv+0x238>
 8001c58:	eddf 0a79 	vldr	s1, [pc, #484]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c60:	f7ff fe12 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 0);
 8001c64:	eddf 1a76 	vldr	s3, [pc, #472]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c68:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c6c:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c70:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c74:	f7ff fe08 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 91);
 8001c78:	eddf 1a72 	vldr	s3, [pc, #456]	; 8001e44 <_Z11mission_1_Lv+0x234>
 8001c7c:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c80:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c84:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001c88:	f7ff fdfe 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 90);
 8001c8c:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001c90:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c94:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001c98:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c9c:	f7ff fdf4 	bl	8001888 <_Z4GoToffff>

	//L-1
	GoTo( 2, 0, craw_to_middle, 90);
 8001ca0:	eddf 1a6a 	vldr	s3, [pc, #424]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001ca4:	eeb2 1a0a 	vmov.f32	s2, #42	; 0x41500000  13.0
 8001ca8:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001cac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001cb0:	f7ff fdea 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoBR, 1);
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4866      	ldr	r0, [pc, #408]	; (8001e50 <_Z11mission_1_Lv+0x240>)
 8001cb8:	f000 ff56 	bl	8002b68 <_Z17update_blockstateP5servob>
	takeBall(1);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fe39 	bl	8001934 <_Z8takeBalli>

	//L-2
	GoTo( 2, 0, -50 - craw_to_middle, 90);
 8001cc2:	eddf 1a62 	vldr	s3, [pc, #392]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001cc6:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8001e54 <_Z11mission_1_Lv+0x244>
 8001cca:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001cce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001cd2:	f7ff fdd9 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoFR, 1);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	485f      	ldr	r0, [pc, #380]	; (8001e58 <_Z11mission_1_Lv+0x248>)
 8001cda:	f000 ff45 	bl	8002b68 <_Z17update_blockstateP5servob>
	takeBall(0);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7ff fe28 	bl	8001934 <_Z8takeBalli>

	//L-3
	GoTo( 2, 0, -100 + craw_to_middle, 90);
 8001ce4:	eddf 1a59 	vldr	s3, [pc, #356]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001ce8:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8001e5c <_Z11mission_1_Lv+0x24c>
 8001cec:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001cf0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001cf4:	f7ff fdc8 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoBR, 0);
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4855      	ldr	r0, [pc, #340]	; (8001e50 <_Z11mission_1_Lv+0x240>)
 8001cfc:	f000 ff34 	bl	8002b68 <_Z17update_blockstateP5servob>
	takeBall(1);
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7ff fe17 	bl	8001934 <_Z8takeBalli>

	//L-4
	GoTo( 2, 0, -150 - craw_to_middle, 90);
 8001d06:	eddf 1a51 	vldr	s3, [pc, #324]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001d0a:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8001e60 <_Z11mission_1_Lv+0x250>
 8001d0e:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001d12:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d16:	f7ff fdb7 	bl	8001888 <_Z4GoToffff>

	update_blockstate(&servoFR, 0);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	484e      	ldr	r0, [pc, #312]	; (8001e58 <_Z11mission_1_Lv+0x248>)
 8001d1e:	f000 ff23 	bl	8002b68 <_Z17update_blockstateP5servob>
	//takeball
	upadate_pos(&Arms[0], 0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	484f      	ldr	r0, [pc, #316]	; (8001e64 <_Z11mission_1_Lv+0x254>)
 8001d26:	f7fe fd17 	bl	8000758 <_Z11upadate_posP3Armi>
	//open claw
	update_claw(&Arms[0], 0);
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	484d      	ldr	r0, [pc, #308]	; (8001e64 <_Z11mission_1_Lv+0x254>)
 8001d2e:	f7fe fd23 	bl	8000778 <_Z11update_clawP3Armb>
	//claw down
	setTargetLocation(&lifters[0], 0);
 8001d32:	2100      	movs	r1, #0
 8001d34:	484c      	ldr	r0, [pc, #304]	; (8001e68 <_Z11mission_1_Lv+0x258>)
 8001d36:	f000 fd39 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	//close claw
	update_claw(&Arms[0], 1);
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4849      	ldr	r0, [pc, #292]	; (8001e64 <_Z11mission_1_Lv+0x254>)
 8001d3e:	f7fe fd1b 	bl	8000778 <_Z11update_clawP3Armb>
	//claw up
	setTargetLocation(&lifters[0], 1);
 8001d42:	2101      	movs	r1, #1
 8001d44:	4848      	ldr	r0, [pc, #288]	; (8001e68 <_Z11mission_1_Lv+0x258>)
 8001d46:	f000 fd31 	bl	80027ac <_Z17setTargetLocationP8DC_motori>

	//L-5
	GoTo( 2, 0, -200 + craw_to_middle, 90);
 8001d4a:	eddf 1a40 	vldr	s3, [pc, #256]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001d4e:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001e6c <_Z11mission_1_Lv+0x25c>
 8001d52:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001d56:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001d5a:	f7ff fd95 	bl	8001888 <_Z4GoToffff>

	//takeball
	upadate_pos(&Arms[1], 0);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4843      	ldr	r0, [pc, #268]	; (8001e70 <_Z11mission_1_Lv+0x260>)
 8001d62:	f7fe fcf9 	bl	8000758 <_Z11upadate_posP3Armi>
	//open claw
	update_claw(&Arms[1], 0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	4841      	ldr	r0, [pc, #260]	; (8001e70 <_Z11mission_1_Lv+0x260>)
 8001d6a:	f7fe fd05 	bl	8000778 <_Z11update_clawP3Armb>
	//claw down
	setTargetLocation(&lifters[1], 0);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4840      	ldr	r0, [pc, #256]	; (8001e74 <_Z11mission_1_Lv+0x264>)
 8001d72:	f000 fd1b 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	//close claw
	update_claw(&Arms[1], 1);
 8001d76:	2101      	movs	r1, #1
 8001d78:	483d      	ldr	r0, [pc, #244]	; (8001e70 <_Z11mission_1_Lv+0x260>)
 8001d7a:	f7fe fcfd 	bl	8000778 <_Z11update_clawP3Armb>
	//claw up
	setTargetLocation(&lifters[1], 1);
 8001d7e:	2101      	movs	r1, #1
 8001d80:	483c      	ldr	r0, [pc, #240]	; (8001e74 <_Z11mission_1_Lv+0x264>)
 8001d82:	f000 fd13 	bl	80027ac <_Z17setTargetLocationP8DC_motori>

	//middle find line(b)
	GoTo( 4, 2, 0, 0);
 8001d86:	eddf 1a2e 	vldr	s3, [pc, #184]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001d8a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001d8e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d92:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001d96:	f7ff fd77 	bl	8001888 <_Z4GoToffff>

	//front spin find line(f)
	GoTo( 4, 7, 1, 0);
 8001d9a:	eddf 1a29 	vldr	s3, [pc, #164]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001d9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001da2:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001da6:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001daa:	f7ff fd6d 	bl	8001888 <_Z4GoToffff>

	//left find line(f)
	GoTo( 4, 6, 1, 0);
 8001dae:	eddf 1a24 	vldr	s3, [pc, #144]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001db2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001db6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001dba:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001dbe:	f7ff fd63 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 0);
 8001dc2:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001dc6:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001dca:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001dce:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001dd2:	f7ff fd59 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 92);
 8001dd6:	eddf 1a28 	vldr	s3, [pc, #160]	; 8001e78 <_Z11mission_1_Lv+0x268>
 8001dda:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001dde:	eddf 0a18 	vldr	s1, [pc, #96]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001de2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001de6:	f7ff fd4f 	bl	8001888 <_Z4GoToffff>

	GoTo( 5, 0, 0, 90);
 8001dea:	eddf 1a18 	vldr	s3, [pc, #96]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001dee:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001df2:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001df6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001dfa:	f7ff fd45 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 10, 90);
 8001dfe:	eddf 1a13 	vldr	s3, [pc, #76]	; 8001e4c <_Z11mission_1_Lv+0x23c>
 8001e02:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001e06:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001e0a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001e0e:	f7ff fd3b 	bl	8001888 <_Z4GoToffff>

	//middle find line(f)
	GoTo( 4, 2, 1, 0);
 8001e12:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001e16:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e1a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001e1e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001e22:	f7ff fd31 	bl	8001888 <_Z4GoToffff>

	//front spin find line(t)
	GoTo( 4, 7, 1, 0);
 8001e26:	eddf 1a06 	vldr	s3, [pc, #24]	; 8001e40 <_Z11mission_1_Lv+0x230>
 8001e2a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e2e:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001e32:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001e36:	f7ff fd27 	bl	8001888 <_Z4GoToffff>
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	00000000 	.word	0x00000000
 8001e44:	42b60000 	.word	0x42b60000
 8001e48:	42c90000 	.word	0x42c90000
 8001e4c:	42b40000 	.word	0x42b40000
 8001e50:	20000150 	.word	0x20000150
 8001e54:	c27c0000 	.word	0xc27c0000
 8001e58:	20000134 	.word	0x20000134
 8001e5c:	c2ae0000 	.word	0xc2ae0000
 8001e60:	c3230000 	.word	0xc3230000
 8001e64:	20000004 	.word	0x20000004
 8001e68:	200000f4 	.word	0x200000f4
 8001e6c:	c33b0000 	.word	0xc33b0000
 8001e70:	20000034 	.word	0x20000034
 8001e74:	2000010c 	.word	0x2000010c
 8001e78:	42b80000 	.word	0x42b80000

08001e7c <_Z9mission_2v>:
void mission_2(){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

	upadate_pos(&Arms[0], 3);
 8001e80:	2103      	movs	r1, #3
 8001e82:	4864      	ldr	r0, [pc, #400]	; (8002014 <_Z9mission_2v+0x198>)
 8001e84:	f7fe fc68 	bl	8000758 <_Z11upadate_posP3Armi>
	upadate_pos(&Arms[1], 3);
 8001e88:	2103      	movs	r1, #3
 8001e8a:	4863      	ldr	r0, [pc, #396]	; (8002018 <_Z9mission_2v+0x19c>)
 8001e8c:	f7fe fc64 	bl	8000758 <_Z11upadate_posP3Armi>
	update_claw(&Arms[0], 1);
 8001e90:	2101      	movs	r1, #1
 8001e92:	4860      	ldr	r0, [pc, #384]	; (8002014 <_Z9mission_2v+0x198>)
 8001e94:	f7fe fc70 	bl	8000778 <_Z11update_clawP3Armb>
	update_claw(&Arms[0], 1);
 8001e98:	2101      	movs	r1, #1
 8001e9a:	485e      	ldr	r0, [pc, #376]	; (8002014 <_Z9mission_2v+0x198>)
 8001e9c:	f7fe fc6c 	bl	8000778 <_Z11update_clawP3Armb>
	//middle find red
	GoTo( 4, 8, 1, 0);

	GoTo( 1, 0, 43, 0);
*/
	GoTo( 1, 0, 180, 0);
 8001ea0:	eddf 1a5e 	vldr	s3, [pc, #376]	; 800201c <_Z9mission_2v+0x1a0>
 8001ea4:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8002020 <_Z9mission_2v+0x1a4>
 8001ea8:	eddf 0a5c 	vldr	s1, [pc, #368]	; 800201c <_Z9mission_2v+0x1a0>
 8001eac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001eb0:	f7ff fcea 	bl	8001888 <_Z4GoToffff>

	//reset
	GoTo( 5, 0, 0, 0);
 8001eb4:	eddf 1a59 	vldr	s3, [pc, #356]	; 800201c <_Z9mission_2v+0x1a0>
 8001eb8:	ed9f 1a58 	vldr	s2, [pc, #352]	; 800201c <_Z9mission_2v+0x1a0>
 8001ebc:	eddf 0a57 	vldr	s1, [pc, #348]	; 800201c <_Z9mission_2v+0x1a0>
 8001ec0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001ec4:	f7ff fce0 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 90);
 8001ec8:	eddf 1a56 	vldr	s3, [pc, #344]	; 8002024 <_Z9mission_2v+0x1a8>
 8001ecc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800201c <_Z9mission_2v+0x1a0>
 8001ed0:	eddf 0a52 	vldr	s1, [pc, #328]	; 800201c <_Z9mission_2v+0x1a0>
 8001ed4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ed8:	f7ff fcd6 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 40, 90);
 8001edc:	eddf 1a51 	vldr	s3, [pc, #324]	; 8002024 <_Z9mission_2v+0x1a8>
 8001ee0:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8002028 <_Z9mission_2v+0x1ac>
 8001ee4:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800201c <_Z9mission_2v+0x1a0>
 8001ee8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001eec:	f7ff fccc 	bl	8001888 <_Z4GoToffff>

	//cascade舉起
	Cascade( 6, 0);
 8001ef0:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800201c <_Z9mission_2v+0x1a0>
 8001ef4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001ef8:	f7ff fcf2 	bl	80018e0 <_Z7Cascadeff>

	Cascade( 7, 0);
 8001efc:	eddf 0a47 	vldr	s1, [pc, #284]	; 800201c <_Z9mission_2v+0x1a0>
 8001f00:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f04:	f7ff fcec 	bl	80018e0 <_Z7Cascadeff>
	Cascade( 7, 1);
 8001f08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f0c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f10:	f7ff fce6 	bl	80018e0 <_Z7Cascadeff>
	wait(200);
 8001f14:	20c8      	movs	r0, #200	; 0xc8
 8001f16:	f7ff fa5b 	bl	80013d0 <wait>
	Cascade( 7, 0);
 8001f1a:	eddf 0a40 	vldr	s1, [pc, #256]	; 800201c <_Z9mission_2v+0x1a0>
 8001f1e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f22:	f7ff fcdd 	bl	80018e0 <_Z7Cascadeff>
	//cascade下降
	Cascade( 6, 1);
 8001f26:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f2a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f2e:	f7ff fcd7 	bl	80018e0 <_Z7Cascadeff>

	update_blockstate(&servoFM, 1);
 8001f32:	2101      	movs	r1, #1
 8001f34:	483d      	ldr	r0, [pc, #244]	; (800202c <_Z9mission_2v+0x1b0>)
 8001f36:	f000 fe17 	bl	8002b68 <_Z17update_blockstateP5servob>
	update_blockstate(&servoBM, 1);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	483c      	ldr	r0, [pc, #240]	; (8002030 <_Z9mission_2v+0x1b4>)
 8001f3e:	f000 fe13 	bl	8002b68 <_Z17update_blockstateP5servob>

	GoTo( 2, 0, -40, 90);
 8001f42:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002024 <_Z9mission_2v+0x1a8>
 8001f46:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8002034 <_Z9mission_2v+0x1b8>
 8001f4a:	eddf 0a34 	vldr	s1, [pc, #208]	; 800201c <_Z9mission_2v+0x1a0>
 8001f4e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001f52:	f7ff fc99 	bl	8001888 <_Z4GoToffff>

	//cascade舉起
	Cascade( 6, 0);
 8001f56:	eddf 0a31 	vldr	s1, [pc, #196]	; 800201c <_Z9mission_2v+0x1a0>
 8001f5a:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f5e:	f7ff fcbf 	bl	80018e0 <_Z7Cascadeff>

	Cascade( 7, 0);
 8001f62:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800201c <_Z9mission_2v+0x1a0>
 8001f66:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f6a:	f7ff fcb9 	bl	80018e0 <_Z7Cascadeff>
	Cascade( 7, 1);
 8001f6e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f72:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f76:	f7ff fcb3 	bl	80018e0 <_Z7Cascadeff>
	wait(200);
 8001f7a:	20c8      	movs	r0, #200	; 0xc8
 8001f7c:	f7ff fa28 	bl	80013d0 <wait>
	Cascade( 7, 0);
 8001f80:	eddf 0a26 	vldr	s1, [pc, #152]	; 800201c <_Z9mission_2v+0x1a0>
 8001f84:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8001f88:	f7ff fcaa 	bl	80018e0 <_Z7Cascadeff>
	//cascade下降
	Cascade( 6, 1);
 8001f8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f90:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001f94:	f7ff fca4 	bl	80018e0 <_Z7Cascadeff>

	//middle find line(f)
	GoTo( 4, 2, 1, 0);
 8001f98:	eddf 1a20 	vldr	s3, [pc, #128]	; 800201c <_Z9mission_2v+0x1a0>
 8001f9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001fa0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001fa4:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001fa8:	f7ff fc6e 	bl	8001888 <_Z4GoToffff>

	//front spin find line(c)
	GoTo( 4, 7, 0, 0);
 8001fac:	eddf 1a1b 	vldr	s3, [pc, #108]	; 800201c <_Z9mission_2v+0x1a0>
 8001fb0:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 800201c <_Z9mission_2v+0x1a0>
 8001fb4:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8001fb8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001fbc:	f7ff fc64 	bl	8001888 <_Z4GoToffff>

	GoTo( 1, 0, 238, 0);
 8001fc0:	eddf 1a16 	vldr	s3, [pc, #88]	; 800201c <_Z9mission_2v+0x1a0>
 8001fc4:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8002038 <_Z9mission_2v+0x1bc>
 8001fc8:	eddf 0a14 	vldr	s1, [pc, #80]	; 800201c <_Z9mission_2v+0x1a0>
 8001fcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001fd0:	f7ff fc5a 	bl	8001888 <_Z4GoToffff>

	//reset
	GoTo( 5, 0, 0, 90);
 8001fd4:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002024 <_Z9mission_2v+0x1a8>
 8001fd8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800201c <_Z9mission_2v+0x1a0>
 8001fdc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800201c <_Z9mission_2v+0x1a0>
 8001fe0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001fe4:	f7ff fc50 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 170);
 8001fe8:	eddf 1a14 	vldr	s3, [pc, #80]	; 800203c <_Z9mission_2v+0x1c0>
 8001fec:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 800201c <_Z9mission_2v+0x1a0>
 8001ff0:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800201c <_Z9mission_2v+0x1a0>
 8001ff4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ff8:	f7ff fc46 	bl	8001888 <_Z4GoToffff>

	GoTo( 4, 4, 1, 0);
 8001ffc:	eddf 1a07 	vldr	s3, [pc, #28]	; 800201c <_Z9mission_2v+0x1a0>
 8002000:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002004:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002008:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 800200c:	f7ff fc3c 	bl	8001888 <_Z4GoToffff>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	20000034 	.word	0x20000034
 800201c:	00000000 	.word	0x00000000
 8002020:	43340000 	.word	0x43340000
 8002024:	42b40000 	.word	0x42b40000
 8002028:	42200000 	.word	0x42200000
 800202c:	2000016c 	.word	0x2000016c
 8002030:	20000188 	.word	0x20000188
 8002034:	c2200000 	.word	0xc2200000
 8002038:	436e0000 	.word	0x436e0000
 800203c:	432a0000 	.word	0x432a0000

08002040 <_Z9mission_3v>:
void mission_3(){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

	GoTo( 1, 0, 180, 0);
 8002044:	eddf 1a65 	vldr	s3, [pc, #404]	; 80021dc <_Z9mission_3v+0x19c>
 8002048:	ed9f 1a65 	vldr	s2, [pc, #404]	; 80021e0 <_Z9mission_3v+0x1a0>
 800204c:	eddf 0a63 	vldr	s1, [pc, #396]	; 80021dc <_Z9mission_3v+0x19c>
 8002050:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002054:	f7ff fc18 	bl	8001888 <_Z4GoToffff>
	GoTo( 1, 0, 257, 0);
 8002058:	eddf 1a60 	vldr	s3, [pc, #384]	; 80021dc <_Z9mission_3v+0x19c>
 800205c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80021e4 <_Z9mission_3v+0x1a4>
 8002060:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80021dc <_Z9mission_3v+0x19c>
 8002064:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002068:	f7ff fc0e 	bl	8001888 <_Z4GoToffff>
	GoTo( 1, 0, 147, 0);
 800206c:	eddf 1a5b 	vldr	s3, [pc, #364]	; 80021dc <_Z9mission_3v+0x19c>
 8002070:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80021e8 <_Z9mission_3v+0x1a8>
 8002074:	eddf 0a59 	vldr	s1, [pc, #356]	; 80021dc <_Z9mission_3v+0x19c>
 8002078:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800207c:	f7ff fc04 	bl	8001888 <_Z4GoToffff>
	GoTo( 1, 0, 260, 0);
 8002080:	eddf 1a56 	vldr	s3, [pc, #344]	; 80021dc <_Z9mission_3v+0x19c>
 8002084:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80021ec <_Z9mission_3v+0x1ac>
 8002088:	eddf 0a54 	vldr	s1, [pc, #336]	; 80021dc <_Z9mission_3v+0x19c>
 800208c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002090:	f7ff fbfa 	bl	8001888 <_Z4GoToffff>

	upadate_pos(&Arms[0], 2);
 8002094:	2102      	movs	r1, #2
 8002096:	4856      	ldr	r0, [pc, #344]	; (80021f0 <_Z9mission_3v+0x1b0>)
 8002098:	f7fe fb5e 	bl	8000758 <_Z11upadate_posP3Armi>
	upadate_pos(&Arms[1], 2);
 800209c:	2102      	movs	r1, #2
 800209e:	4855      	ldr	r0, [pc, #340]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80020a0:	f7fe fb5a 	bl	8000758 <_Z11upadate_posP3Armi>

	GoTo( 1, 0, 135, 0);
 80020a4:	eddf 1a4d 	vldr	s3, [pc, #308]	; 80021dc <_Z9mission_3v+0x19c>
 80020a8:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80021f8 <_Z9mission_3v+0x1b8>
 80020ac:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80021dc <_Z9mission_3v+0x19c>
 80020b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80020b4:	f7ff fbe8 	bl	8001888 <_Z4GoToffff>

	//reset
	GoTo( 5, 0, 0, 0);
 80020b8:	eddf 1a48 	vldr	s3, [pc, #288]	; 80021dc <_Z9mission_3v+0x19c>
 80020bc:	ed9f 1a47 	vldr	s2, [pc, #284]	; 80021dc <_Z9mission_3v+0x19c>
 80020c0:	eddf 0a46 	vldr	s1, [pc, #280]	; 80021dc <_Z9mission_3v+0x19c>
 80020c4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80020c8:	f7ff fbde 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 92);
 80020cc:	eddf 1a4b 	vldr	s3, [pc, #300]	; 80021fc <_Z9mission_3v+0x1bc>
 80020d0:	ed9f 1a42 	vldr	s2, [pc, #264]	; 80021dc <_Z9mission_3v+0x19c>
 80020d4:	eddf 0a41 	vldr	s1, [pc, #260]	; 80021dc <_Z9mission_3v+0x19c>
 80020d8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80020dc:	f7ff fbd4 	bl	8001888 <_Z4GoToffff>

	//reset
	GoTo( 5, 0, 0, 90);
 80020e0:	eddf 1a47 	vldr	s3, [pc, #284]	; 8002200 <_Z9mission_3v+0x1c0>
 80020e4:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 80021dc <_Z9mission_3v+0x19c>
 80020e8:	eddf 0a3c 	vldr	s1, [pc, #240]	; 80021dc <_Z9mission_3v+0x19c>
 80020ec:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80020f0:	f7ff fbca 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 70, 90);
 80020f4:	eddf 1a42 	vldr	s3, [pc, #264]	; 8002200 <_Z9mission_3v+0x1c0>
 80020f8:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002204 <_Z9mission_3v+0x1c4>
 80020fc:	eddf 0a37 	vldr	s1, [pc, #220]	; 80021dc <_Z9mission_3v+0x19c>
 8002100:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002104:	f7ff fbc0 	bl	8001888 <_Z4GoToffff>

	//reset
	GoTo( 5, 0, 0, 0);
 8002108:	eddf 1a34 	vldr	s3, [pc, #208]	; 80021dc <_Z9mission_3v+0x19c>
 800210c:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80021dc <_Z9mission_3v+0x19c>
 8002110:	eddf 0a32 	vldr	s1, [pc, #200]	; 80021dc <_Z9mission_3v+0x19c>
 8002114:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002118:	f7ff fbb6 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 0, 90);
 800211c:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002200 <_Z9mission_3v+0x1c0>
 8002120:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80021dc <_Z9mission_3v+0x19c>
 8002124:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80021dc <_Z9mission_3v+0x19c>
 8002128:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800212c:	f7ff fbac 	bl	8001888 <_Z4GoToffff>

	//爪子上升到最高
	setTargetLocation(&lifters[0], 1);
 8002130:	2101      	movs	r1, #1
 8002132:	4835      	ldr	r0, [pc, #212]	; (8002208 <_Z9mission_3v+0x1c8>)
 8002134:	f000 fb3a 	bl	80027ac <_Z17setTargetLocationP8DC_motori>
	setTargetLocation(&lifters[1], 1);
 8002138:	2101      	movs	r1, #1
 800213a:	4834      	ldr	r0, [pc, #208]	; (800220c <_Z9mission_3v+0x1cc>)
 800213c:	f000 fb36 	bl	80027ac <_Z17setTargetLocationP8DC_motori>

	//reset
	GoTo( 5, 0, 0, 90);
 8002140:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8002200 <_Z9mission_3v+0x1c0>
 8002144:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80021dc <_Z9mission_3v+0x19c>
 8002148:	eddf 0a24 	vldr	s1, [pc, #144]	; 80021dc <_Z9mission_3v+0x19c>
 800214c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002150:	f7ff fb9a 	bl	8001888 <_Z4GoToffff>

	GoTo( 2, 0, 61.5 + craw_to_middle, 90);
 8002154:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8002200 <_Z9mission_3v+0x1c0>
 8002158:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002210 <_Z9mission_3v+0x1d0>
 800215c:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80021dc <_Z9mission_3v+0x19c>
 8002160:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002164:	f7ff fb90 	bl	8001888 <_Z4GoToffff>

	placeBall(1);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff fc3f 	bl	80019ec <_Z9placeBalli>

	GoTo( 2, 0, 208.5 - craw_to_middle, 90);
 800216e:	eddf 1a24 	vldr	s3, [pc, #144]	; 8002200 <_Z9mission_3v+0x1c0>
 8002172:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8002214 <_Z9mission_3v+0x1d4>
 8002176:	eddf 0a19 	vldr	s1, [pc, #100]	; 80021dc <_Z9mission_3v+0x19c>
 800217a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800217e:	f7ff fb83 	bl	8001888 <_Z4GoToffff>

	placeBall(0);
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fc32 	bl	80019ec <_Z9placeBalli>

	GoTo( 2, 0, 355.5 + craw_to_middle, 90);
 8002188:	eddf 1a1d 	vldr	s3, [pc, #116]	; 8002200 <_Z9mission_3v+0x1c0>
 800218c:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8002218 <_Z9mission_3v+0x1d8>
 8002190:	eddf 0a12 	vldr	s1, [pc, #72]	; 80021dc <_Z9mission_3v+0x19c>
 8002194:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002198:	f7ff fb76 	bl	8001888 <_Z4GoToffff>

	update_claw(&Arms[1], 0);
 800219c:	2100      	movs	r1, #0
 800219e:	4815      	ldr	r0, [pc, #84]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80021a0:	f7fe faea 	bl	8000778 <_Z11update_clawP3Armb>
	upadate_pos(&Arms[1], 1);
 80021a4:	2101      	movs	r1, #1
 80021a6:	4813      	ldr	r0, [pc, #76]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80021a8:	f7fe fad6 	bl	8000758 <_Z11upadate_posP3Armi>
	update_claw(&Arms[1], 1);
 80021ac:	2101      	movs	r1, #1
 80021ae:	4811      	ldr	r0, [pc, #68]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80021b0:	f7fe fae2 	bl	8000778 <_Z11update_clawP3Armb>
	upadate_pos(&Arms[1], 2);
 80021b4:	2102      	movs	r1, #2
 80021b6:	480f      	ldr	r0, [pc, #60]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80021b8:	f7fe face 	bl	8000758 <_Z11upadate_posP3Armi>
	update_claw(&Arms[1], 0);
 80021bc:	2100      	movs	r1, #0
 80021be:	480d      	ldr	r0, [pc, #52]	; (80021f4 <_Z9mission_3v+0x1b4>)
 80021c0:	f7fe fada 	bl	8000778 <_Z11update_clawP3Armb>

	GoTo( 3, 0, 0, 0);
 80021c4:	eddf 1a05 	vldr	s3, [pc, #20]	; 80021dc <_Z9mission_3v+0x19c>
 80021c8:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80021dc <_Z9mission_3v+0x19c>
 80021cc:	eddf 0a03 	vldr	s1, [pc, #12]	; 80021dc <_Z9mission_3v+0x19c>
 80021d0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80021d4:	f7ff fb58 	bl	8001888 <_Z4GoToffff>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	00000000 	.word	0x00000000
 80021e0:	43340000 	.word	0x43340000
 80021e4:	43808000 	.word	0x43808000
 80021e8:	43130000 	.word	0x43130000
 80021ec:	43820000 	.word	0x43820000
 80021f0:	20000004 	.word	0x20000004
 80021f4:	20000034 	.word	0x20000034
 80021f8:	43070000 	.word	0x43070000
 80021fc:	42b80000 	.word	0x42b80000
 8002200:	42b40000 	.word	0x42b40000
 8002204:	428c0000 	.word	0x428c0000
 8002208:	200000f4 	.word	0x200000f4
 800220c:	2000010c 	.word	0x2000010c
 8002210:	42950000 	.word	0x42950000
 8002214:	43438000 	.word	0x43438000
 8002218:	43b84000 	.word	0x43b84000

0800221c <_Z13DCmotor_setupv>:
	{&PID_controllers[1],&htim5,0,1,1,reduction_ratio}
};
//declarefunction

//DC motor setup,put in setup
void DCmotor_setup(){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);//motor[2]
 8002220:	2104      	movs	r1, #4
 8002222:	480c      	ldr	r0, [pc, #48]	; (8002254 <_Z13DCmotor_setupv+0x38>)
 8002224:	f003 fa28 	bl	8005678 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8002228:	2100      	movs	r1, #0
 800222a:	480a      	ldr	r0, [pc, #40]	; (8002254 <_Z13DCmotor_setupv+0x38>)
 800222c:	f003 fa24 	bl	8005678 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_2);//motor[1]
 8002230:	2104      	movs	r1, #4
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <_Z13DCmotor_setupv+0x3c>)
 8002234:	f003 fa20 	bl	8005678 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1);
 8002238:	2100      	movs	r1, #0
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <_Z13DCmotor_setupv+0x3c>)
 800223c:	f003 fa1c 	bl	8005678 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8002240:	2100      	movs	r1, #0
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <_Z13DCmotor_setupv+0x40>)
 8002244:	f003 f85c 	bl	8005300 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8002248:	2104      	movs	r1, #4
 800224a:	4804      	ldr	r0, [pc, #16]	; (800225c <_Z13DCmotor_setupv+0x40>)
 800224c:	f002 ff90 	bl	8005170 <HAL_TIM_PWM_Start>
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000027c 	.word	0x2000027c
 8002258:	200002c4 	.word	0x200002c4
 800225c:	2000042c 	.word	0x2000042c

08002260 <_Z14PI_control_runP8DC_motorf>:
//PID
void PI_control_run(DC_motor *motor,float sp) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	ed87 0a00 	vstr	s0, [r7]
    float error, u_a = 0;
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
    motor->PID_Controllers->pul = 0;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	629a      	str	r2, [r3, #40]	; 0x28
    float bound = 1 / motor->PID_Controllers->ki;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228a:	edc7 7a04 	vstr	s15, [r7, #16]
    motor->PID_Controllers->setpoint = sp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	611a      	str	r2, [r3, #16]
    error = motor->PID_Controllers->setpoint - motor->speed;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	ed93 7a04 	vldr	s14, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	edc7 7a03 	vstr	s15, [r7, #12]
    motor->PID_Controllers->integral += error * motor->PID_Controllers->span;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80022bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022cc:	edc3 7a02 	vstr	s15, [r3, #8]
    if (motor->PID_Controllers->integral
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80022d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80022dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d504      	bpl.n	80022f0 <_Z14PI_control_runP8DC_motorf+0x90>
    		> bound) motor->PID_Controllers->integral = bound;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	e014      	b.n	800231a <_Z14PI_control_runP8DC_motorf+0xba>
    else if (motor->PID_Controllers->integral
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	ed93 7a02 	vldr	s14, [r3, #8]
    		< -bound) motor->PID_Controllers->integral = -bound;
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	eef1 7a67 	vneg.f32	s15, s15
    else if (motor->PID_Controllers->integral
 8002300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d507      	bpl.n	800231a <_Z14PI_control_runP8DC_motorf+0xba>
    		< -bound) motor->PID_Controllers->integral = -bound;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002312:	eef1 7a67 	vneg.f32	s15, s15
 8002316:	edc3 7a02 	vstr	s15, [r3, #8]
    u_a = motor->PID_Controllers->kp * error
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	edd7 7a03 	vldr	s15, [r7, #12]
 8002326:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ motor->PID_Controllers->ki * motor->PID_Controllers->integral;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	edd3 7a02 	vldr	s15, [r3, #8]
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    u_a = motor->PID_Controllers->kp * error
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	edc7 7a05 	vstr	s15, [r7, #20]
    if (u_a > 1) u_a = 1;
 8002346:	edd7 7a05 	vldr	s15, [r7, #20]
 800234a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800234e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002356:	dd03      	ble.n	8002360 <_Z14PI_control_runP8DC_motorf+0x100>
 8002358:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e00a      	b.n	8002376 <_Z14PI_control_runP8DC_motorf+0x116>
    else if (u_a < -1) u_a = -1;
 8002360:	edd7 7a05 	vldr	s15, [r7, #20]
 8002364:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d501      	bpl.n	8002376 <_Z14PI_control_runP8DC_motorf+0x116>
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <_Z14PI_control_runP8DC_motorf+0x220>)
 8002374:	617b      	str	r3, [r7, #20]

    if (u_a > 0) {
 8002376:	edd7 7a05 	vldr	s15, [r7, #20]
 800237a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	dd1c      	ble.n	80023be <_Z14PI_control_runP8DC_motorf+0x15e>
    	motor->PID_Controllers->pul = (int)(u_a * motor->PID_Controllers->arr);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002392:	edd7 7a05 	vldr	s15, [r7, #20]
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	ee17 2a90 	vmov	r2, s15
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_SET);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6998      	ldr	r0, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	8b9b      	ldrh	r3, [r3, #28]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	f001 ff82 	bl	80042c0 <HAL_GPIO_WritePin>
 80023bc:	e029      	b.n	8002412 <_Z14PI_control_runP8DC_motorf+0x1b2>
    } else if (u_a < 0) {
 80023be:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d51e      	bpl.n	800240a <_Z14PI_control_runP8DC_motorf+0x1aa>
    	motor->PID_Controllers->pul = (int)(-u_a * motor->PID_Controllers->arr);
 80023cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023d0:	eeb1 7a67 	vneg.f32	s14, s15
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ee:	ee17 2a90 	vmov	r2, s15
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_RESET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6998      	ldr	r0, [r3, #24]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	8b9b      	ldrh	r3, [r3, #28]
 8002400:	2200      	movs	r2, #0
 8002402:	4619      	mov	r1, r3
 8002404:	f001 ff5c 	bl	80042c0 <HAL_GPIO_WritePin>
 8002408:	e003      	b.n	8002412 <_Z14PI_control_runP8DC_motorf+0x1b2>
    } else {
    	motor->PID_Controllers->pul = 0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2200      	movs	r2, #0
 8002410:	629a      	str	r2, [r3, #40]	; 0x28
    }
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, motor->PID_Controllers->pul);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d108      	bne.n	800242e <_Z14PI_control_runP8DC_motorf+0x1ce>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800242c:	e023      	b.n	8002476 <_Z14PI_control_runP8DC_motorf+0x216>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, motor->PID_Controllers->pul);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2b04      	cmp	r3, #4
 8002436:	d108      	bne.n	800244a <_Z14PI_control_runP8DC_motorf+0x1ea>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002448:	e015      	b.n	8002476 <_Z14PI_control_runP8DC_motorf+0x216>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, motor->PID_Controllers->pul);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	2b08      	cmp	r3, #8
 8002452:	d108      	bne.n	8002466 <_Z14PI_control_runP8DC_motorf+0x206>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002464:	e007      	b.n	8002476 <_Z14PI_control_runP8DC_motorf+0x216>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, motor->PID_Controllers->pul);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	bf800000 	.word	0xbf800000

08002484 <_Z8getStateP8DC_motori>:
//get speed of encoder
void getState(DC_motor *motor,int sign){
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	int16_t enc ;
	enc = __HAL_TIM_GetCounter(motor->htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	81fb      	strh	r3, [r7, #14]
	motor->speed = sign*(float)enc /(4*resolution*motor->reduction_ratio*span);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80024b8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80024ec <_Z8getStateP8DC_motori+0x68>
 80024bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <_Z8getStateP8DC_motori+0x6c>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edc3 7a02 	vstr	s15, [r3, #8]
	__HAL_TIM_SetCounter(motor->htim,0);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24
	//motor->currentLocation += motor->speed*span*sign;
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	45000000 	.word	0x45000000
 80024f0:	20000094 	.word	0x20000094

080024f4 <_Z14updateLocationt>:
//put in EXTI
void updateLocation(uint16_t GPIO_Pin){//get ball location = 0,put ball location = 1
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
	  switch (GPIO_Pin) {
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	3b01      	subs	r3, #1
 8002502:	2b1f      	cmp	r3, #31
 8002504:	f200 80b8 	bhi.w	8002678 <_Z14updateLocationt+0x184>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <_Z14updateLocationt+0x1c>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002605 	.word	0x08002605
 8002514:	0800263f 	.word	0x0800263f
 8002518:	08002679 	.word	0x08002679
 800251c:	08002679 	.word	0x08002679
 8002520:	08002679 	.word	0x08002679
 8002524:	08002679 	.word	0x08002679
 8002528:	08002679 	.word	0x08002679
 800252c:	08002679 	.word	0x08002679
 8002530:	08002679 	.word	0x08002679
 8002534:	08002679 	.word	0x08002679
 8002538:	08002679 	.word	0x08002679
 800253c:	08002679 	.word	0x08002679
 8002540:	08002679 	.word	0x08002679
 8002544:	08002679 	.word	0x08002679
 8002548:	08002679 	.word	0x08002679
 800254c:	08002591 	.word	0x08002591
 8002550:	08002679 	.word	0x08002679
 8002554:	08002679 	.word	0x08002679
 8002558:	08002679 	.word	0x08002679
 800255c:	08002679 	.word	0x08002679
 8002560:	08002679 	.word	0x08002679
 8002564:	08002679 	.word	0x08002679
 8002568:	08002679 	.word	0x08002679
 800256c:	08002679 	.word	0x08002679
 8002570:	08002679 	.word	0x08002679
 8002574:	08002679 	.word	0x08002679
 8002578:	08002679 	.word	0x08002679
 800257c:	08002679 	.word	0x08002679
 8002580:	08002679 	.word	0x08002679
 8002584:	08002679 	.word	0x08002679
 8002588:	08002679 	.word	0x08002679
 800258c:	080025cb 	.word	0x080025cb
	  case GPIO_PIN_4:// get ball
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	4619      	mov	r1, r3
 8002594:	483f      	ldr	r0, [pc, #252]	; (8002694 <_Z14updateLocationt+0x1a0>)
 8002596:	f001 fe7b 	bl	8004290 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d068      	beq.n	800267c <_Z14updateLocationt+0x188>
		  lifters[0].currentLocation = 0;
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <_Z14updateLocationt+0x1a4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
		  if(lifters[0].goalLocation == 0){
 80025b0:	4b39      	ldr	r3, [pc, #228]	; (8002698 <_Z14updateLocationt+0x1a4>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d161      	bne.n	800267c <_Z14updateLocationt+0x188>
		  sp[0] = 0;
 80025b8:	4b38      	ldr	r3, [pc, #224]	; (800269c <_Z14updateLocationt+0x1a8>)
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
		  sp_test[0] = 0;
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <_Z14updateLocationt+0x1ac>)
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
		  }
		  }
		  break;
 80025c8:	e058      	b.n	800267c <_Z14updateLocationt+0x188>
	  case GPIO_PIN_5://put ball
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_Pin) == GPIO_PIN_SET){
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4831      	ldr	r0, [pc, #196]	; (8002694 <_Z14updateLocationt+0x1a0>)
 80025d0:	f001 fe5e 	bl	8004290 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d04d      	beq.n	8002680 <_Z14updateLocationt+0x18c>
	      lifters[0].currentLocation = 1;
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <_Z14updateLocationt+0x1a4>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	60da      	str	r2, [r3, #12]
	      if(lifters[0].goalLocation == 1){
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <_Z14updateLocationt+0x1a4>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d146      	bne.n	8002680 <_Z14updateLocationt+0x18c>
	      sp[0] = 0;
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <_Z14updateLocationt+0x1a8>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
	      sp_test[0] = 0;
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <_Z14updateLocationt+0x1ac>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
	      }
		  }
	  	  break;
 8002602:	e03d      	b.n	8002680 <_Z14updateLocationt+0x18c>
	  case GPIO_PIN_0://put ball
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_SET){
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	4619      	mov	r1, r3
 8002608:	4826      	ldr	r0, [pc, #152]	; (80026a4 <_Z14updateLocationt+0x1b0>)
 800260a:	f001 fe41 	bl	8004290 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d032      	beq.n	8002684 <_Z14updateLocationt+0x190>
	 	  lifters[1].currentLocation = 1;
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <_Z14updateLocationt+0x1a4>)
 8002620:	2201      	movs	r2, #1
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
	 	  if(lifters[1].goalLocation == 1){
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <_Z14updateLocationt+0x1a4>)
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	2b01      	cmp	r3, #1
 800262a:	d12b      	bne.n	8002684 <_Z14updateLocationt+0x190>
	 	  sp[1] = 0;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <_Z14updateLocationt+0x1a8>)
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
	 	  sp_test[1] = 0;
 8002634:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <_Z14updateLocationt+0x1ac>)
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
	 	  }
	 	  }
	  	  break;
 800263c:	e022      	b.n	8002684 <_Z14updateLocationt+0x190>
	  case GPIO_PIN_1://get ball
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_Pin) == GPIO_PIN_SET){
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	4619      	mov	r1, r3
 8002642:	4818      	ldr	r0, [pc, #96]	; (80026a4 <_Z14updateLocationt+0x1b0>)
 8002644:	f001 fe24 	bl	8004290 <HAL_GPIO_ReadPin>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d017      	beq.n	8002688 <_Z14updateLocationt+0x194>
	  	  lifters[1].currentLocation = 0;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <_Z14updateLocationt+0x1a4>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
	      if(lifters[1].goalLocation == 0){
 800265e:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <_Z14updateLocationt+0x1a4>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	2b00      	cmp	r3, #0
 8002664:	d110      	bne.n	8002688 <_Z14updateLocationt+0x194>
	   	  sp[1] = 0;
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <_Z14updateLocationt+0x1a8>)
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
	      sp_test[1] = 0;
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <_Z14updateLocationt+0x1ac>)
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	605a      	str	r2, [r3, #4]
	      }
		  }
	  	  break;
 8002676:	e007      	b.n	8002688 <_Z14updateLocationt+0x194>
	  default:
		  break;
 8002678:	bf00      	nop
 800267a:	e006      	b.n	800268a <_Z14updateLocationt+0x196>
		  break;
 800267c:	bf00      	nop
 800267e:	e004      	b.n	800268a <_Z14updateLocationt+0x196>
	  	  break;
 8002680:	bf00      	nop
 8002682:	e002      	b.n	800268a <_Z14updateLocationt+0x196>
	  	  break;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <_Z14updateLocationt+0x196>
	  	  break;
 8002688:	bf00      	nop
	  }
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020400 	.word	0x40020400
 8002698:	200000f4 	.word	0x200000f4
 800269c:	2000062c 	.word	0x2000062c
 80026a0:	20000634 	.word	0x20000634
 80026a4:	40020800 	.word	0x40020800

080026a8 <_Z17reach_destinationP8DC_motor>:
bool reach_destination(DC_motor *lifter){
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	if (lifter->currentLocation == lifter->goalLocation )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d101      	bne.n	80026c0 <_Z17reach_destinationP8DC_motor+0x18>
		return 1;
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <_Z17reach_destinationP8DC_motor+0x1a>
	else{
		return 0;
 80026c0:	2300      	movs	r3, #0
	}
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <_Z11DCmotor_runv>:
//run all the DC motro function,put in timer IT
void DCmotor_run(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	//get speed from encoder, and calculate height
	getState(&lifters[0],-1);//
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026d8:	4811      	ldr	r0, [pc, #68]	; (8002720 <_Z11DCmotor_runv+0x50>)
 80026da:	f7ff fed3 	bl	8002484 <_Z8getStateP8DC_motori>
	getState(&lifters[1],1);//
 80026de:	2101      	movs	r1, #1
 80026e0:	4810      	ldr	r0, [pc, #64]	; (8002724 <_Z11DCmotor_runv+0x54>)
 80026e2:	f7ff fecf 	bl	8002484 <_Z8getStateP8DC_motori>
	//set goal height of lifter
	gotoTargetLocation(&lifters[0],&sp[0]);
 80026e6:	4910      	ldr	r1, [pc, #64]	; (8002728 <_Z11DCmotor_runv+0x58>)
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <_Z11DCmotor_runv+0x50>)
 80026ea:	f000 f821 	bl	8002730 <_Z18gotoTargetLocationP8DC_motorPf>
	gotoTargetLocation(&lifters[1],&sp[1]);
 80026ee:	490f      	ldr	r1, [pc, #60]	; (800272c <_Z11DCmotor_runv+0x5c>)
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <_Z11DCmotor_runv+0x54>)
 80026f2:	f000 f81d 	bl	8002730 <_Z18gotoTargetLocationP8DC_motorPf>
    // PI control DCmotor with velocity set point
	PI_control_run(&lifters[0],-sp[0]);
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <_Z11DCmotor_runv+0x58>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	eef1 7a67 	vneg.f32	s15, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	4806      	ldr	r0, [pc, #24]	; (8002720 <_Z11DCmotor_runv+0x50>)
 8002706:	f7ff fdab 	bl	8002260 <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&lifters[1],sp[1]);
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_Z11DCmotor_runv+0x58>)
 800270c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002710:	eeb0 0a67 	vmov.f32	s0, s15
 8002714:	4803      	ldr	r0, [pc, #12]	; (8002724 <_Z11DCmotor_runv+0x54>)
 8002716:	f7ff fda3 	bl	8002260 <_Z14PI_control_runP8DC_motorf>
	}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200000f4 	.word	0x200000f4
 8002724:	2000010c 	.word	0x2000010c
 8002728:	2000062c 	.word	0x2000062c
 800272c:	20000630 	.word	0x20000630

08002730 <_Z18gotoTargetLocationP8DC_motorPf>:
int y[3] = {0,0,0};
void gotoTargetLocation(DC_motor *lifter,float *velocity_sp){
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
	  give speed,sp[0] for the back arm,sp[1] for the back arm,
	  set targetLocation,1 for go up,0 for go down
	  基本上用的時候extern int target_Location[2] 就好,
	  target_Location[0]是前面手臂的,target_Location[1]是後面手臂的
	  要調速度的話改lifter_speed,預設是1RPS,然後目前兩隻lifter速度變數用都是同個 */
	if (lifter->currentLocation != lifter->goalLocation){
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	429a      	cmp	r2, r3
 8002744:	d01f      	beq.n	8002786 <_Z18gotoTargetLocationP8DC_motorPf+0x56>
		if(lifter->currentLocation == 0){//get ball
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <_Z18gotoTargetLocationP8DC_motorPf+0x3a>
			*velocity_sp = -lifter_speed;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_Z18gotoTargetLocationP8DC_motorPf+0x74>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	eef1 7a67 	vneg.f32	s15, s15
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	edc3 7a00 	vstr	s15, [r3]
			y[0]++;
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 8002766:	6013      	str	r3, [r2, #0]
		}
	}else{
		y[2]++;
		*velocity_sp = 0;
	}
}
 8002768:	e016      	b.n	8002798 <_Z18gotoTargetLocationP8DC_motorPf+0x68>
		}else if(lifter->currentLocation == 1){//put ball
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d112      	bne.n	8002798 <_Z18gotoTargetLocationP8DC_motorPf+0x68>
			*velocity_sp = lifter_speed;
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <_Z18gotoTargetLocationP8DC_motorPf+0x74>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
			y[1]++;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	3301      	adds	r3, #1
 8002780:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 8002782:	6053      	str	r3, [r2, #4]
}
 8002784:	e008      	b.n	8002798 <_Z18gotoTargetLocationP8DC_motorPf+0x68>
		y[2]++;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	3301      	adds	r3, #1
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <_Z18gotoTargetLocationP8DC_motorPf+0x78>)
 800278e:	6093      	str	r3, [r2, #8]
		*velocity_sp = 0;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20000098 	.word	0x20000098
 80027a8:	2000063c 	.word	0x2000063c

080027ac <_Z17setTargetLocationP8DC_motori>:
//for script
void setTargetLocation(DC_motor *lifter,int targetLocation){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
	//lifter[0]是前面的[1]是後面的,targetLocation 1是到上面放球0是到下面取球
	lifter->goalLocation = targetLocation;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	611a      	str	r2, [r3, #16]
	while(!reach_destination(lifter)){
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff73 	bl	80026a8 <_Z17reach_destinationP8DC_motor>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f083 0301 	eor.w	r3, r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d000      	beq.n	80027d0 <_Z17setTargetLocationP8DC_motori+0x24>
 80027ce:	e7f5      	b.n	80027bc <_Z17setTargetLocationP8DC_motori+0x10>
	}

}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_Z12DCMOTOR_TESTv>:
//for test
void DCMOTOR_TEST(){
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	getState(&lifters[0],-1);//
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027e0:	4811      	ldr	r0, [pc, #68]	; (8002828 <_Z12DCMOTOR_TESTv+0x50>)
 80027e2:	f7ff fe4f 	bl	8002484 <_Z8getStateP8DC_motori>
    getState(&lifters[1],1);//
 80027e6:	2101      	movs	r1, #1
 80027e8:	4810      	ldr	r0, [pc, #64]	; (800282c <_Z12DCMOTOR_TESTv+0x54>)
 80027ea:	f7ff fe4b 	bl	8002484 <_Z8getStateP8DC_motori>
	PI_control_run(&lifters[0],-sp[0]);
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <_Z12DCMOTOR_TESTv+0x58>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	eef1 7a67 	vneg.f32	s15, s15
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	480a      	ldr	r0, [pc, #40]	; (8002828 <_Z12DCMOTOR_TESTv+0x50>)
 80027fe:	f7ff fd2f 	bl	8002260 <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&lifters[1],sp[1]);
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <_Z12DCMOTOR_TESTv+0x58>)
 8002804:	edd3 7a01 	vldr	s15, [r3, #4]
 8002808:	eeb0 0a67 	vmov.f32	s0, s15
 800280c:	4807      	ldr	r0, [pc, #28]	; (800282c <_Z12DCMOTOR_TESTv+0x54>)
 800280e:	f7ff fd27 	bl	8002260 <_Z14PI_control_runP8DC_motorf>
	gotoTargetLocation(&lifters[0],&sp[0]);
 8002812:	4907      	ldr	r1, [pc, #28]	; (8002830 <_Z12DCMOTOR_TESTv+0x58>)
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <_Z12DCMOTOR_TESTv+0x50>)
 8002816:	f7ff ff8b 	bl	8002730 <_Z18gotoTargetLocationP8DC_motorPf>
	gotoTargetLocation(&lifters[1],&sp[1]);
 800281a:	4906      	ldr	r1, [pc, #24]	; (8002834 <_Z12DCMOTOR_TESTv+0x5c>)
 800281c:	4803      	ldr	r0, [pc, #12]	; (800282c <_Z12DCMOTOR_TESTv+0x54>)
 800281e:	f7ff ff87 	bl	8002730 <_Z18gotoTargetLocationP8DC_motorPf>
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200000f4 	.word	0x200000f4
 800282c:	2000010c 	.word	0x2000010c
 8002830:	2000062c 	.word	0x2000062c
 8002834:	20000630 	.word	0x20000630

08002838 <_Z41__static_initialization_and_destruction_0ii>:
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d124      	bne.n	8002892 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284e:	4293      	cmp	r3, r2
 8002850:	d11f      	bne.n	8002892 <_Z41__static_initialization_and_destruction_0ii+0x5a>
};
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002860:	6053      	str	r3, [r2, #4]
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002868:	60d3      	str	r3, [r2, #12]
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002870:	6153      	str	r3, [r2, #20]
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002878:	62d3      	str	r3, [r2, #44]	; 0x2c
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002888:	6393      	str	r3, [r2, #56]	; 0x38
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000008c 	.word	0x2000008c
 80028a4:	2000009c 	.word	0x2000009c
 80028a8:	20000088 	.word	0x20000088
 80028ac:	20000094 	.word	0x20000094
 80028b0:	20000090 	.word	0x20000090

080028b4 <_GLOBAL__sub_I_ki>:
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028bc:	2001      	movs	r0, #1
 80028be:	f7ff ffbb 	bl	8002838 <_Z41__static_initialization_and_destruction_0ii>
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <_Z11servo_setupv>:
servo servoBR = {0, 0, 0, 2000, true, false, &htim1, TIM_CHANNEL_2};
servo servoFM = {0, 0, 0, 2000, true, false, &htim1, TIM_CHANNEL_3};
servo servoBM = {0, 0, 0, 2000, true, false, &htim1, TIM_CHANNEL_1};

//servo timer setup,put in setup
void servo_setup(){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028c8:	2100      	movs	r1, #0
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <_Z11servo_setupv+0x28>)
 80028cc:	f002 fc50 	bl	8005170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028d0:	2104      	movs	r1, #4
 80028d2:	4806      	ldr	r0, [pc, #24]	; (80028ec <_Z11servo_setupv+0x28>)
 80028d4:	f002 fc4c 	bl	8005170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028d8:	2108      	movs	r1, #8
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <_Z11servo_setupv+0x28>)
 80028dc:	f002 fc48 	bl	8005170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80028e0:	210c      	movs	r1, #12
 80028e2:	4802      	ldr	r0, [pc, #8]	; (80028ec <_Z11servo_setupv+0x28>)
 80028e4:	f002 fc44 	bl	8005170 <HAL_TIM_PWM_Start>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200001ec 	.word	0x200001ec

080028f0 <_Z10servo_moveP5servof>:
//servo control function
void servo_move(servo*servo,float goalAngle){
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	ed87 0a00 	vstr	s0, [r7]
	//response time 為轉到指定角度時間,預設1秒
	servo -> goalAngle = goalAngle;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]
	servo -> responseTime = responseTime;
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <_Z10servo_moveP5servof+0x2c>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60da      	str	r2, [r3, #12]
	servo -> move = true;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	741a      	strb	r2, [r3, #16]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	20000124 	.word	0x20000124

08002920 <_Z9servo_runP5servoi>:
void servo_run(servo*servo ,int updateFreq){/*updateFreq = timer IT frequency (Hz)
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
	put in timer IT*/
	if (servo -> move == true){
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7c1b      	ldrb	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	f040 8095 	bne.w	8002a5e <_Z9servo_runP5servoi+0x13e>
		if ((int)servo -> pos == (int)servo -> goalAngle){
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293e:	ee17 2a90 	vmov	r2, s15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	edd3 7a01 	vldr	s15, [r3, #4]
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	429a      	cmp	r2, r3
 8002952:	d107      	bne.n	8002964 <_Z9servo_runP5servoi+0x44>
    	servo -> move = false;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	741a      	strb	r2, [r3, #16]
    	servo -> lastAngle = servo -> goalAngle;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	609a      	str	r2, [r3, #8]
         servo -> pos += distance/(servo -> responseTime * updateFreq / 1000);
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
         t++;
        }
	}
}
 8002962:	e07c      	b.n	8002a5e <_Z9servo_runP5servoi+0x13e>
         float distance = servo -> goalAngle - servo -> lastAngle;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	ed93 7a01 	vldr	s14, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a03 	vstr	s15, [r7, #12]
         servo -> pos += distance/(servo -> responseTime * updateFreq / 1000);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a38      	ldr	r2, [pc, #224]	; (8002a6c <_Z9servo_runP5servoi+0x14c>)
 800298a:	fb82 1203 	smull	r1, r2, r2, r3
 800298e:	1192      	asrs	r2, r2, #6
 8002990:	17db      	asrs	r3, r3, #31
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800299c:	ed97 6a03 	vldr	s12, [r7, #12]
 80029a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edc3 7a00 	vstr	s15, [r3]
         __HAL_TIM_SET_COMPARE(servo -> htim, servo -> TIM_CHANNEL,600+10*(int)servo -> pos);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d111      	bne.n	80029da <_Z9servo_runP5servoi+0xba>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c0:	ee17 2a90 	vmov	r2, s15
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
 80029d8:	e03c      	b.n	8002a54 <_Z9servo_runP5servoi+0x134>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d111      	bne.n	8002a06 <_Z9servo_runP5servoi+0xe6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ec:	ee17 2a90 	vmov	r2, s15
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	f503 7216 	add.w	r2, r3, #600	; 0x258
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
 8002a04:	e026      	b.n	8002a54 <_Z9servo_runP5servoi+0x134>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d111      	bne.n	8002a32 <_Z9servo_runP5servoi+0x112>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a18:	ee17 2a90 	vmov	r2, s15
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a30:	e010      	b.n	8002a54 <_Z9servo_runP5servoi+0x134>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a3c:	ee17 2a90 	vmov	r2, s15
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	f503 7216 	add.w	r2, r3, #600	; 0x258
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
         t++;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <_Z9servo_runP5servoi+0x150>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <_Z9servo_runP5servoi+0x150>)
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	10624dd3 	.word	0x10624dd3
 8002a70:	20000648 	.word	0x20000648

08002a74 <_Z10blockStatev>:
//put in timer IT
void blockState(){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	/*bloack_state_FR右前,bloack_state_BR右後,bloack_state_FM中前,bloack_state_BM中後
	true open ,false close
	用的時候extern直接改block_state[4]*/
	servo_run(&servoFR, 1000);
 8002a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a7c:	4833      	ldr	r0, [pc, #204]	; (8002b4c <_Z10blockStatev+0xd8>)
 8002a7e:	f7ff ff4f 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoBR, 1000);
 8002a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a86:	4832      	ldr	r0, [pc, #200]	; (8002b50 <_Z10blockStatev+0xdc>)
 8002a88:	f7ff ff4a 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoFM, 1000);
 8002a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a90:	4830      	ldr	r0, [pc, #192]	; (8002b54 <_Z10blockStatev+0xe0>)
 8002a92:	f7ff ff45 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoBM, 1000);
 8002a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a9a:	482f      	ldr	r0, [pc, #188]	; (8002b58 <_Z10blockStatev+0xe4>)
 8002a9c:	f7ff ff40 	bl	8002920 <_Z9servo_runP5servoi>
	if (servoFR.block_state == true){
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <_Z10blockStatev+0xd8>)
 8002aa2:	7c5b      	ldrb	r3, [r3, #17]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <_Z10blockStatev+0x40>
		servo_move(&servoFR, 170);
 8002aa8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002b5c <_Z10blockStatev+0xe8>
 8002aac:	4827      	ldr	r0, [pc, #156]	; (8002b4c <_Z10blockStatev+0xd8>)
 8002aae:	f7ff ff1f 	bl	80028f0 <_Z10servo_moveP5servof>
 8002ab2:	e004      	b.n	8002abe <_Z10blockStatev+0x4a>
	}else{
		servo_move(&servoFR, 40);
 8002ab4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8002b60 <_Z10blockStatev+0xec>
 8002ab8:	4824      	ldr	r0, [pc, #144]	; (8002b4c <_Z10blockStatev+0xd8>)
 8002aba:	f7ff ff19 	bl	80028f0 <_Z10servo_moveP5servof>
	}
	if (servoBR.block_state == true){
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <_Z10blockStatev+0xdc>)
 8002ac0:	7c5b      	ldrb	r3, [r3, #17]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <_Z10blockStatev+0x5e>
		servo_move(&servoBR, 40);
 8002ac6:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002b60 <_Z10blockStatev+0xec>
 8002aca:	4821      	ldr	r0, [pc, #132]	; (8002b50 <_Z10blockStatev+0xdc>)
 8002acc:	f7ff ff10 	bl	80028f0 <_Z10servo_moveP5servof>
 8002ad0:	e004      	b.n	8002adc <_Z10blockStatev+0x68>
	}else{
		servo_move(&servoBR, 170);
 8002ad2:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002b5c <_Z10blockStatev+0xe8>
 8002ad6:	481e      	ldr	r0, [pc, #120]	; (8002b50 <_Z10blockStatev+0xdc>)
 8002ad8:	f7ff ff0a 	bl	80028f0 <_Z10servo_moveP5servof>
		}
	if (servoFM.block_state == true){
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <_Z10blockStatev+0xe0>)
 8002ade:	7c5b      	ldrb	r3, [r3, #17]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10b      	bne.n	8002afc <_Z10blockStatev+0x88>
		servo_move(&servoFM, servoAngle[0]);
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <_Z10blockStatev+0xf0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af0:	eeb0 0a67 	vmov.f32	s0, s15
 8002af4:	4817      	ldr	r0, [pc, #92]	; (8002b54 <_Z10blockStatev+0xe0>)
 8002af6:	f7ff fefb 	bl	80028f0 <_Z10servo_moveP5servof>
 8002afa:	e00a      	b.n	8002b12 <_Z10blockStatev+0x9e>
	}else{
		servo_move(&servoFM, servoAngle[1]);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <_Z10blockStatev+0xf0>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0c:	4811      	ldr	r0, [pc, #68]	; (8002b54 <_Z10blockStatev+0xe0>)
 8002b0e:	f7ff feef 	bl	80028f0 <_Z10servo_moveP5servof>
	}
	if (servoBM.block_state == true){
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <_Z10blockStatev+0xe4>)
 8002b14:	7c5b      	ldrb	r3, [r3, #17]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10b      	bne.n	8002b32 <_Z10blockStatev+0xbe>
		servo_move(&servoBM, servoAngle[1]);
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <_Z10blockStatev+0xf0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <_Z10blockStatev+0xe4>)
 8002b2c:	f7ff fee0 	bl	80028f0 <_Z10servo_moveP5servof>
	}else{
		servo_move(&servoBM, servoAngle[0]);
		}
}
 8002b30:	e00a      	b.n	8002b48 <_Z10blockStatev+0xd4>
		servo_move(&servoBM, servoAngle[0]);
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <_Z10blockStatev+0xf0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b42:	4805      	ldr	r0, [pc, #20]	; (8002b58 <_Z10blockStatev+0xe4>)
 8002b44:	f7ff fed4 	bl	80028f0 <_Z10servo_moveP5servof>
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000134 	.word	0x20000134
 8002b50:	20000150 	.word	0x20000150
 8002b54:	2000016c 	.word	0x2000016c
 8002b58:	20000188 	.word	0x20000188
 8002b5c:	432a0000 	.word	0x432a0000
 8002b60:	42200000 	.word	0x42200000
 8002b64:	20000128 	.word	0x20000128

08002b68 <_Z17update_blockstateP5servob>:
//for script
void update_blockstate(servo *block,bool block_state){
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
	//先選哪一顆servo,然後block_state為true時擋板打開,false擋板關閉
	block->block_state = block_state;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	745a      	strb	r2, [r3, #17]
	//wait(0);
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <_Z10SERVO_TESTv>:
//for test
void SERVO_TEST(){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	servo_run(&servoFR, 1000);
 8002b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b90:	481f      	ldr	r0, [pc, #124]	; (8002c10 <_Z10SERVO_TESTv+0x88>)
 8002b92:	f7ff fec5 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoBR, 1000);
 8002b96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b9a:	481e      	ldr	r0, [pc, #120]	; (8002c14 <_Z10SERVO_TESTv+0x8c>)
 8002b9c:	f7ff fec0 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoFM, 1000);
 8002ba0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba4:	481c      	ldr	r0, [pc, #112]	; (8002c18 <_Z10SERVO_TESTv+0x90>)
 8002ba6:	f7ff febb 	bl	8002920 <_Z9servo_runP5servoi>
	servo_run(&servoBM, 1000);
 8002baa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bae:	481b      	ldr	r0, [pc, #108]	; (8002c1c <_Z10SERVO_TESTv+0x94>)
 8002bb0:	f7ff feb6 	bl	8002920 <_Z9servo_runP5servoi>
	servo_move(&servoFR, testAngle[0]);
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <_Z10SERVO_TESTv+0x98>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc4:	4812      	ldr	r0, [pc, #72]	; (8002c10 <_Z10SERVO_TESTv+0x88>)
 8002bc6:	f7ff fe93 	bl	80028f0 <_Z10servo_moveP5servof>
	servo_move(&servoBR, testAngle[1]);
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_Z10SERVO_TESTv+0x98>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bda:	480e      	ldr	r0, [pc, #56]	; (8002c14 <_Z10SERVO_TESTv+0x8c>)
 8002bdc:	f7ff fe88 	bl	80028f0 <_Z10servo_moveP5servof>
	servo_move(&servoFM, testAngle[2]);
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_Z10SERVO_TESTv+0x98>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	ee07 3a90 	vmov	s15, r3
 8002be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bec:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf0:	4809      	ldr	r0, [pc, #36]	; (8002c18 <_Z10SERVO_TESTv+0x90>)
 8002bf2:	f7ff fe7d 	bl	80028f0 <_Z10servo_moveP5servof>
	servo_move(&servoBM, testAngle[3]);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <_Z10SERVO_TESTv+0x98>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	4805      	ldr	r0, [pc, #20]	; (8002c1c <_Z10SERVO_TESTv+0x94>)
 8002c08:	f7ff fe72 	bl	80028f0 <_Z10servo_moveP5servof>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000134 	.word	0x20000134
 8002c14:	20000150 	.word	0x20000150
 8002c18:	2000016c 	.word	0x2000016c
 8002c1c:	20000188 	.word	0x20000188
 8002c20:	2000064c 	.word	0x2000064c

08002c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c62:	2007      	movs	r0, #7
 8002c64:	f000 fd3c 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800

08002c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_TIM_PWM_MspInit+0x70>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d116      	bne.n	8002cb4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	201a      	movs	r0, #26
 8002ca8:	f000 fd25 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002cac:	201a      	movs	r0, #26
 8002cae:	f000 fd3e 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002cb2:	e012      	b.n	8002cda <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM12)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_TIM_PWM_MspInit+0x78>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10d      	bne.n	8002cda <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_TIM_PWM_MspInit+0x74>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	60bb      	str	r3, [r7, #8]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40001800 	.word	0x40001800

08002cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d116      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a45      	ldr	r2, [pc, #276]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d1e:	2200      	movs	r2, #0
 8002d20:	2100      	movs	r1, #0
 8002d22:	201c      	movs	r0, #28
 8002d24:	f000 fce7 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d28:	201c      	movs	r0, #28
 8002d2a:	f000 fd00 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002d2e:	e072      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_TIM_Base_MspInit+0x134>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	4b38      	ldr	r3, [pc, #224]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d44:	f043 0320 	orr.w	r3, r3, #32
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4a:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	69bb      	ldr	r3, [r7, #24]
}
 8002d56:	e05e      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM9)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_TIM_Base_MspInit+0x138>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a2d      	ldr	r2, [pc, #180]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
}
 8002d7e:	e04a      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_TIM_Base_MspInit+0x13c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10e      	bne.n	8002da8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
}
 8002da6:	e036      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM11)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <HAL_TIM_Base_MspInit+0x140>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d116      	bne.n	8002de0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	201a      	movs	r0, #26
 8002dd4:	f000 fc8f 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002dd8:	201a      	movs	r0, #26
 8002dda:	f000 fca8 	bl	800372e <HAL_NVIC_EnableIRQ>
}
 8002dde:	e01a      	b.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_TIM_Base_MspInit+0x144>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d115      	bne.n	8002e16 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfa:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <HAL_TIM_Base_MspInit+0x130>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	202c      	movs	r0, #44	; 0x2c
 8002e0c:	f000 fc73 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e10:	202c      	movs	r0, #44	; 0x2c
 8002e12:	f000 fc8c 	bl	800372e <HAL_NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40001400 	.word	0x40001400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40001c00 	.word	0x40001c00

08002e38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d12c      	bne.n	8002eb4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a30      	ldr	r2, [pc, #192]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a29      	ldr	r2, [pc, #164]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea6:	f107 031c 	add.w	r3, r7, #28
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481e      	ldr	r0, [pc, #120]	; (8002f28 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002eae:	f001 f85b 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002eb2:	e030      	b.n	8002f16 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIM_Encoder_MspInit+0xf4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12b      	bne.n	8002f16 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ec8:	f043 0308 	orr.w	r3, r3, #8
 8002ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_TIM_Encoder_MspInit+0xec>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002f06:	2302      	movs	r3, #2
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4805      	ldr	r0, [pc, #20]	; (8002f28 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002f12:	f001 f829 	bl	8003f68 <HAL_GPIO_Init>
}
 8002f16:	bf00      	nop
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40000c00 	.word	0x40000c00

08002f30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <HAL_TIM_MspPostInit+0xb4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d11f      	bne.n	8002f92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002f6e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4818      	ldr	r0, [pc, #96]	; (8002fec <HAL_TIM_MspPostInit+0xbc>)
 8002f8c:	f000 ffec 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002f90:	e023      	b.n	8002fda <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <HAL_TIM_MspPostInit+0xc0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d11e      	bne.n	8002fda <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	6313      	str	r3, [r2, #48]	; 0x30
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_TIM_MspPostInit+0xb8>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002fb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002fca:	2309      	movs	r3, #9
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4807      	ldr	r0, [pc, #28]	; (8002ff4 <HAL_TIM_MspPostInit+0xc4>)
 8002fd6:	f000 ffc7 	bl	8003f68 <HAL_GPIO_Init>
}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	; 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40010000 	.word	0x40010000
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020000 	.word	0x40020000
 8002ff0:	40001800 	.word	0x40001800
 8002ff4:	40020400 	.word	0x40020400

08002ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a83      	ldr	r2, [pc, #524]	; (8003224 <HAL_UART_MspInit+0x22c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d14b      	bne.n	80030b2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
 800301e:	4b82      	ldr	r3, [pc, #520]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	4a81      	ldr	r2, [pc, #516]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003028:	6413      	str	r3, [r2, #64]	; 0x40
 800302a:	4b7f      	ldr	r3, [pc, #508]	; (8003228 <HAL_UART_MspInit+0x230>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	623b      	str	r3, [r7, #32]
 8003034:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	4b7b      	ldr	r3, [pc, #492]	; (8003228 <HAL_UART_MspInit+0x230>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a7a      	ldr	r2, [pc, #488]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003040:	f043 0304 	orr.w	r3, r3, #4
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b78      	ldr	r3, [pc, #480]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	4b74      	ldr	r3, [pc, #464]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a73      	ldr	r2, [pc, #460]	; (8003228 <HAL_UART_MspInit+0x230>)
 800305c:	f043 0308 	orr.w	r3, r3, #8
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b71      	ldr	r3, [pc, #452]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800306e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003080:	2308      	movs	r3, #8
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003088:	4619      	mov	r1, r3
 800308a:	4868      	ldr	r0, [pc, #416]	; (800322c <HAL_UART_MspInit+0x234>)
 800308c:	f000 ff6c 	bl	8003f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003090:	2304      	movs	r3, #4
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030a0:	2308      	movs	r3, #8
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a8:	4619      	mov	r1, r3
 80030aa:	4861      	ldr	r0, [pc, #388]	; (8003230 <HAL_UART_MspInit+0x238>)
 80030ac:	f000 ff5c 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030b0:	e0b4      	b.n	800321c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a5f      	ldr	r2, [pc, #380]	; (8003234 <HAL_UART_MspInit+0x23c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f040 80af 	bne.w	800321c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a51      	ldr	r2, [pc, #324]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_UART_MspInit+0x230>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_UART_MspInit+0x230>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003112:	2320      	movs	r3, #32
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311e:	2303      	movs	r3, #3
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003122:	2307      	movs	r3, #7
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312a:	4619      	mov	r1, r3
 800312c:	483f      	ldr	r0, [pc, #252]	; (800322c <HAL_UART_MspInit+0x234>)
 800312e:	f000 ff1b 	bl	8003f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003140:	2303      	movs	r3, #3
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003144:	2307      	movs	r3, #7
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314c:	4619      	mov	r1, r3
 800314e:	483a      	ldr	r0, [pc, #232]	; (8003238 <HAL_UART_MspInit+0x240>)
 8003150:	f000 ff0a 	bl	8003f68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003154:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_UART_MspInit+0x244>)
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <HAL_UART_MspInit+0x248>)
 8003158:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800315a:	4b38      	ldr	r3, [pc, #224]	; (800323c <HAL_UART_MspInit+0x244>)
 800315c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003160:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <HAL_UART_MspInit+0x244>)
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003168:	4b34      	ldr	r3, [pc, #208]	; (800323c <HAL_UART_MspInit+0x244>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <HAL_UART_MspInit+0x244>)
 8003170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003174:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_UART_MspInit+0x244>)
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800317c:	4b2f      	ldr	r3, [pc, #188]	; (800323c <HAL_UART_MspInit+0x244>)
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003182:	4b2e      	ldr	r3, [pc, #184]	; (800323c <HAL_UART_MspInit+0x244>)
 8003184:	2200      	movs	r2, #0
 8003186:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003188:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_UART_MspInit+0x244>)
 800318a:	2200      	movs	r2, #0
 800318c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800318e:	4b2b      	ldr	r3, [pc, #172]	; (800323c <HAL_UART_MspInit+0x244>)
 8003190:	2200      	movs	r2, #0
 8003192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003194:	4829      	ldr	r0, [pc, #164]	; (800323c <HAL_UART_MspInit+0x244>)
 8003196:	f000 fae5 	bl	8003764 <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80031a0:	f7fe f8dc 	bl	800135c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a25      	ldr	r2, [pc, #148]	; (800323c <HAL_UART_MspInit+0x244>)
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38
 80031aa:	4a24      	ldr	r2, [pc, #144]	; (800323c <HAL_UART_MspInit+0x244>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80031b0:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031b2:	4a25      	ldr	r2, [pc, #148]	; (8003248 <HAL_UART_MspInit+0x250>)
 80031b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80031f0:	4814      	ldr	r0, [pc, #80]	; (8003244 <HAL_UART_MspInit+0x24c>)
 80031f2:	f000 fab7 	bl	8003764 <HAL_DMA_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_UART_MspInit+0x208>
      Error_Handler();
 80031fc:	f7fe f8ae 	bl	800135c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HAL_UART_MspInit+0x24c>)
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_UART_MspInit+0x24c>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	2027      	movs	r0, #39	; 0x27
 8003212:	f000 fa70 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003216:	2027      	movs	r0, #39	; 0x27
 8003218:	f000 fa89 	bl	800372e <HAL_NVIC_EnableIRQ>
}
 800321c:	bf00      	nop
 800321e:	3738      	adds	r7, #56	; 0x38
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40005000 	.word	0x40005000
 8003228:	40023800 	.word	0x40023800
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40004800 	.word	0x40004800
 8003238:	40020400 	.word	0x40020400
 800323c:	20000544 	.word	0x20000544
 8003240:	40026028 	.word	0x40026028
 8003244:	200005a4 	.word	0x200005a4
 8003248:	40026058 	.word	0x40026058

0800324c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <NMI_Handler+0x4>

08003252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003256:	e7fe      	b.n	8003256 <HardFault_Handler+0x4>

08003258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800325c:	e7fe      	b.n	800325c <MemManage_Handler+0x4>

0800325e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003262:	e7fe      	b.n	8003262 <BusFault_Handler+0x4>

08003264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler+0x4>

0800326a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003298:	f000 f932 	bl	8003500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}

080032a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f001 f825 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}

080032ae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80032b2:	2002      	movs	r0, #2
 80032b4:	f001 f81e 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}

080032bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032c0:	2004      	movs	r0, #4
 80032c2:	f001 f817 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}

080032ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80032ce:	2008      	movs	r0, #8
 80032d0:	f001 f810 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80032dc:	2010      	movs	r0, #16
 80032de:	f001 f809 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <DMA1_Stream1_IRQHandler+0x10>)
 80032ee:	f000 fbd1 	bl	8003a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000544 	.word	0x20000544

080032fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <DMA1_Stream3_IRQHandler+0x10>)
 8003302:	f000 fbc7 	bl	8003a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200005a4 	.word	0x200005a4

08003310 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003314:	2020      	movs	r0, #32
 8003316:	f000 ffed 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800331a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800331e:	f000 ffe9 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003322:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003326:	f000 ffe5 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003334:	4803      	ldr	r0, [pc, #12]	; (8003344 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003336:	f002 fa2d 	bl	8005794 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800333c:	f002 fa2a 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200001ec 	.word	0x200001ec
 8003348:	20000354 	.word	0x20000354

0800334c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003352:	f002 fa1f 	bl	8005794 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003356:	4803      	ldr	r0, [pc, #12]	; (8003364 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003358:	f002 fa1c 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	200001ec 	.word	0x200001ec
 8003364:	2000039c 	.word	0x2000039c

08003368 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800336c:	4803      	ldr	r0, [pc, #12]	; (800337c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800336e:	f002 fa11 	bl	8005794 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003372:	4803      	ldr	r0, [pc, #12]	; (8003380 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003374:	f002 fa0e 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}
 800337c:	200001ec 	.word	0x200001ec
 8003380:	200003e4 	.word	0x200003e4

08003384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <TIM2_IRQHandler+0x10>)
 800338a:	f002 fa03 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000234 	.word	0x20000234

08003398 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <USART3_IRQHandler+0x10>)
 800339e:	f003 fa33 	bl	8006808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000500 	.word	0x20000500

080033ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80033b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033b4:	f000 ff9e 	bl	80042f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}

080033bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80033c2:	f002 f9e7 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000474 	.word	0x20000474

080033d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM7_IRQHandler+0x10>)
 80033d6:	f002 f9dd 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000030c 	.word	0x2000030c

080033e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <SystemInit+0x20>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	4a05      	ldr	r2, [pc, #20]	; (8003404 <SystemInit+0x20>)
 80033f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800340c:	480d      	ldr	r0, [pc, #52]	; (8003444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800340e:	490e      	ldr	r1, [pc, #56]	; (8003448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003410:	4a0e      	ldr	r2, [pc, #56]	; (800344c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003414:	e002      	b.n	800341c <LoopCopyDataInit>

08003416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800341a:	3304      	adds	r3, #4

0800341c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800341c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003420:	d3f9      	bcc.n	8003416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003424:	4c0b      	ldr	r4, [pc, #44]	; (8003454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003428:	e001      	b.n	800342e <LoopFillZerobss>

0800342a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800342a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800342c:	3204      	adds	r2, #4

0800342e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003430:	d3fb      	bcc.n	800342a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003432:	f7ff ffd7 	bl	80033e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003436:	f004 fb35 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800343a:	f7fd fa6f 	bl	800091c <main>
  bx  lr    
 800343e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003448:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 800344c:	08007b48 	.word	0x08007b48
  ldr r2, =_sbss
 8003450:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8003454:	20000660 	.word	0x20000660

08003458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003458:	e7fe      	b.n	8003458 <ADC_IRQHandler>
	...

0800345c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_Init+0x40>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0d      	ldr	r2, [pc, #52]	; (800349c <HAL_Init+0x40>)
 8003466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_Init+0x40>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_Init+0x40>)
 8003472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_Init+0x40>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <HAL_Init+0x40>)
 800347e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003484:	2003      	movs	r0, #3
 8003486:	f000 f92b 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800348a:	2000      	movs	r0, #0
 800348c:	f000 f808 	bl	80034a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003490:	f7ff fbc8 	bl	8002c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023c00 	.word	0x40023c00

080034a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_InitTick+0x54>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_InitTick+0x58>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	4619      	mov	r1, r3
 80034b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f943 	bl	800374a <HAL_SYSTICK_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e00e      	b.n	80034ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b0f      	cmp	r3, #15
 80034d2:	d80a      	bhi.n	80034ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034d4:	2200      	movs	r2, #0
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034dc:	f000 f90b 	bl	80036f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034e0:	4a06      	ldr	r2, [pc, #24]	; (80034fc <HAL_InitTick+0x5c>)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	e000      	b.n	80034ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200001a4 	.word	0x200001a4
 80034f8:	200001ac 	.word	0x200001ac
 80034fc:	200001a8 	.word	0x200001a8

08003500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_IncTick+0x20>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_IncTick+0x24>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4413      	add	r3, r2
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_IncTick+0x24>)
 8003512:	6013      	str	r3, [r2, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200001ac 	.word	0x200001ac
 8003524:	2000065c 	.word	0x2000065c

08003528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return uwTick;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_GetTick+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	2000065c 	.word	0x2000065c

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	; (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	; (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	; (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <SysTick_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ba:	210f      	movs	r1, #15
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c0:	f7ff ff8e 	bl	80035e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <SysTick_Config+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <SysTick_Config+0x40>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff29 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003708:	f7ff ff3e 	bl	8003588 <__NVIC_GetPriorityGrouping>
 800370c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff8e 	bl	8003634 <NVIC_EncodePriority>
 8003718:	4602      	mov	r2, r0
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff5d 	bl	80035e0 <__NVIC_SetPriority>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff31 	bl	80035a4 <__NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ffa2 	bl	800369c <SysTick_Config>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003770:	f7ff feda 	bl	8003528 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e099      	b.n	80038b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a0:	e00f      	b.n	80037c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a2:	f7ff fec1 	bl	8003528 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d908      	bls.n	80037c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2203      	movs	r2, #3
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e078      	b.n	80038b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e8      	bne.n	80037a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4b38      	ldr	r3, [pc, #224]	; (80038bc <HAL_DMA_Init+0x158>)
 80037dc:	4013      	ands	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	2b04      	cmp	r3, #4
 800381a:	d107      	bne.n	800382c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4313      	orrs	r3, r2
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0307 	bic.w	r3, r3, #7
 8003842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	2b04      	cmp	r3, #4
 8003854:	d117      	bne.n	8003886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00e      	beq.n	8003886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb01 	bl	8003e70 <DMA_CheckFifoParam>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003882:	2301      	movs	r3, #1
 8003884:	e016      	b.n	80038b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fab8 	bl	8003e04 <DMA_CalcBaseAndBitshift>
 8003894:	4603      	mov	r3, r0
 8003896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	223f      	movs	r2, #63	; 0x3f
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	f010803f 	.word	0xf010803f

080038c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d101      	bne.n	80038e6 <HAL_DMA_Start_IT+0x26>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e040      	b.n	8003968 <HAL_DMA_Start_IT+0xa8>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d12f      	bne.n	800395a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2202      	movs	r2, #2
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fa4a 	bl	8003da8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	223f      	movs	r2, #63	; 0x3f
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0216 	orr.w	r2, r2, #22
 800392e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e005      	b.n	8003966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800397e:	f7ff fdd3 	bl	8003528 <HAL_GetTick>
 8003982:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d008      	beq.n	80039a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e052      	b.n	8003a48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0216 	bic.w	r2, r2, #22
 80039b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <HAL_DMA_Abort+0x62>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0208 	bic.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f2:	e013      	b.n	8003a1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f4:	f7ff fd98 	bl	8003528 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d90c      	bls.n	8003a1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e015      	b.n	8003a48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e4      	bne.n	80039f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	223f      	movs	r2, #63	; 0x3f
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d004      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00c      	b.n	8003a88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2205      	movs	r2, #5
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	; (8003cdc <HAL_DMA_IRQHandler+0x248>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a8e      	ldr	r2, [pc, #568]	; (8003ce0 <HAL_DMA_IRQHandler+0x24c>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0a9b      	lsrs	r3, r3, #10
 8003aac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2208      	movs	r2, #8
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01a      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0204 	bic.w	r2, r2, #4
 8003ae6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	2208      	movs	r2, #8
 8003aee:	409a      	lsls	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b04:	2201      	movs	r2, #1
 8003b06:	409a      	lsls	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d012      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	2201      	movs	r2, #1
 8003b24:	409a      	lsls	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d012      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2204      	movs	r2, #4
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f043 0204 	orr.w	r2, r3, #4
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	2210      	movs	r2, #16
 8003b72:	409a      	lsls	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d043      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d03c      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2210      	movs	r2, #16
 8003b90:	409a      	lsls	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d018      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d024      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
 8003bc2:	e01f      	b.n	8003c04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01b      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
 8003bd4:	e016      	b.n	8003c04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0208 	bic.w	r2, r2, #8
 8003bf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	2220      	movs	r2, #32
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 808f 	beq.w	8003d34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8087 	beq.w	8003d34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d136      	bne.n	8003cac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0216 	bic.w	r2, r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_DMA_IRQHandler+0x1da>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0208 	bic.w	r2, r2, #8
 8003c7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	223f      	movs	r2, #63	; 0x3f
 8003c84:	409a      	lsls	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d07e      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
        }
        return;
 8003caa:	e079      	b.n	8003da0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10d      	bne.n	8003ce4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
 8003cd8:	e02c      	b.n	8003d34 <HAL_DMA_IRQHandler+0x2a0>
 8003cda:	bf00      	nop
 8003cdc:	200001a4 	.word	0x200001a4
 8003ce0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d023      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
 8003cf4:	e01e      	b.n	8003d34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0210 	bic.w	r2, r2, #16
 8003d12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d032      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d022      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d307      	bcc.n	8003d7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f2      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x2cc>
 8003d7a:	e000      	b.n	8003d7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
 8003d9e:	e000      	b.n	8003da2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003da0:	bf00      	nop
    }
  }
}
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d108      	bne.n	8003de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003de6:	e007      	b.n	8003df8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	60da      	str	r2, [r3, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	3b10      	subs	r3, #16
 8003e14:	4a14      	ldr	r2, [pc, #80]	; (8003e68 <DMA_CalcBaseAndBitshift+0x64>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e1e:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <DMA_CalcBaseAndBitshift+0x68>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d909      	bls.n	8003e46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	659a      	str	r2, [r3, #88]	; 0x58
 8003e44:	e007      	b.n	8003e56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	aaaaaaab 	.word	0xaaaaaaab
 8003e6c:	08007b2c 	.word	0x08007b2c

08003e70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11f      	bne.n	8003eca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d856      	bhi.n	8003f3e <DMA_CheckFifoParam+0xce>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <DMA_CheckFifoParam+0x28>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ebb 	.word	0x08003ebb
 8003ea0:	08003ea9 	.word	0x08003ea9
 8003ea4:	08003f3f 	.word	0x08003f3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d046      	beq.n	8003f42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb8:	e043      	b.n	8003f42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec2:	d140      	bne.n	8003f46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec8:	e03d      	b.n	8003f46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed2:	d121      	bne.n	8003f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d837      	bhi.n	8003f4a <DMA_CheckFifoParam+0xda>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <DMA_CheckFifoParam+0x70>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003ef1 	.word	0x08003ef1
 8003ee4:	08003ef7 	.word	0x08003ef7
 8003ee8:	08003ef1 	.word	0x08003ef1
 8003eec:	08003f09 	.word	0x08003f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef4:	e030      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d025      	beq.n	8003f4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f06:	e022      	b.n	8003f4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f10:	d11f      	bne.n	8003f52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f16:	e01c      	b.n	8003f52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d903      	bls.n	8003f26 <DMA_CheckFifoParam+0xb6>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d003      	beq.n	8003f2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f24:	e018      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2a:	e015      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e00b      	b.n	8003f56 <DMA_CheckFifoParam+0xe6>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e00a      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e008      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e006      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e004      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <DMA_CheckFifoParam+0xe8>
      break;
 8003f56:	bf00      	nop
    }
  } 
  
  return status; 
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e165      	b.n	8004250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 8154 	bne.w	800424a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d005      	beq.n	8003fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d130      	bne.n	800401c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0201 	and.w	r2, r3, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d017      	beq.n	8004058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d123      	bne.n	80040ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80ae 	beq.w	800424a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b5d      	ldr	r3, [pc, #372]	; (8004268 <HAL_GPIO_Init+0x300>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	4a5c      	ldr	r2, [pc, #368]	; (8004268 <HAL_GPIO_Init+0x300>)
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040fc:	6453      	str	r3, [r2, #68]	; 0x44
 80040fe:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <HAL_GPIO_Init+0x300>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410a:	4a58      	ldr	r2, [pc, #352]	; (800426c <HAL_GPIO_Init+0x304>)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4f      	ldr	r2, [pc, #316]	; (8004270 <HAL_GPIO_Init+0x308>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d025      	beq.n	8004182 <HAL_GPIO_Init+0x21a>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4e      	ldr	r2, [pc, #312]	; (8004274 <HAL_GPIO_Init+0x30c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01f      	beq.n	800417e <HAL_GPIO_Init+0x216>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4d      	ldr	r2, [pc, #308]	; (8004278 <HAL_GPIO_Init+0x310>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d019      	beq.n	800417a <HAL_GPIO_Init+0x212>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4c      	ldr	r2, [pc, #304]	; (800427c <HAL_GPIO_Init+0x314>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_Init+0x20e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4b      	ldr	r2, [pc, #300]	; (8004280 <HAL_GPIO_Init+0x318>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00d      	beq.n	8004172 <HAL_GPIO_Init+0x20a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4a      	ldr	r2, [pc, #296]	; (8004284 <HAL_GPIO_Init+0x31c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <HAL_GPIO_Init+0x206>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a49      	ldr	r2, [pc, #292]	; (8004288 <HAL_GPIO_Init+0x320>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_GPIO_Init+0x202>
 8004166:	2306      	movs	r3, #6
 8004168:	e00c      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 800416a:	2307      	movs	r3, #7
 800416c:	e00a      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 800416e:	2305      	movs	r3, #5
 8004170:	e008      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 8004172:	2304      	movs	r3, #4
 8004174:	e006      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 8004176:	2303      	movs	r3, #3
 8004178:	e004      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 800417a:	2302      	movs	r3, #2
 800417c:	e002      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_GPIO_Init+0x21c>
 8004182:	2300      	movs	r3, #0
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	f002 0203 	and.w	r2, r2, #3
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	4093      	lsls	r3, r2
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004194:	4935      	ldr	r1, [pc, #212]	; (800426c <HAL_GPIO_Init+0x304>)
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3302      	adds	r3, #2
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_GPIO_Init+0x324>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041c6:	4a31      	ldr	r2, [pc, #196]	; (800428c <HAL_GPIO_Init+0x324>)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_GPIO_Init+0x324>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f0:	4a26      	ldr	r2, [pc, #152]	; (800428c <HAL_GPIO_Init+0x324>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041f6:	4b25      	ldr	r3, [pc, #148]	; (800428c <HAL_GPIO_Init+0x324>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_GPIO_Init+0x324>)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <HAL_GPIO_Init+0x324>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <HAL_GPIO_Init+0x324>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3301      	adds	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	f67f ae96 	bls.w	8003f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	3724      	adds	r7, #36	; 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	40013800 	.word	0x40013800
 8004270:	40020000 	.word	0x40020000
 8004274:	40020400 	.word	0x40020400
 8004278:	40020800 	.word	0x40020800
 800427c:	40020c00 	.word	0x40020c00
 8004280:	40021000 	.word	0x40021000
 8004284:	40021400 	.word	0x40021400
 8004288:	40021800 	.word	0x40021800
 800428c:	40013c00 	.word	0x40013c00

08004290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e001      	b.n	80042b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
 80042cc:	4613      	mov	r3, r2
 80042ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d0:	787b      	ldrb	r3, [r7, #1]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042d6:	887a      	ldrh	r2, [r7, #2]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042dc:	e003      	b.n	80042e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042de:	887b      	ldrh	r3, [r7, #2]
 80042e0:	041a      	lsls	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	619a      	str	r2, [r3, #24]
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042fe:	4b08      	ldr	r3, [pc, #32]	; (8004320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	4013      	ands	r3, r2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800430a:	4a05      	ldr	r2, [pc, #20]	; (8004320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd faa6 	bl	8001864 <HAL_GPIO_EXTI_Callback>
  }
}
 8004318:	bf00      	nop
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40013c00 	.word	0x40013c00

08004324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0cc      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b68      	ldr	r3, [pc, #416]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d90c      	bls.n	8004360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b63      	ldr	r3, [pc, #396]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0b8      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004378:	4b59      	ldr	r3, [pc, #356]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4a58      	ldr	r2, [pc, #352]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004390:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a52      	ldr	r2, [pc, #328]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800439a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800439c:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	494d      	ldr	r1, [pc, #308]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d044      	beq.n	8004444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d107      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d119      	bne.n	8004402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e07f      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e06f      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f2:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e067      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004402:	4b37      	ldr	r3, [pc, #220]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 0203 	bic.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4934      	ldr	r1, [pc, #208]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	4313      	orrs	r3, r2
 8004412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004414:	f7ff f888 	bl	8003528 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	e00a      	b.n	8004432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441c:	f7ff f884 	bl	8003528 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	; 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e04f      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 020c 	and.w	r2, r3, #12
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	429a      	cmp	r2, r3
 8004442:	d1eb      	bne.n	800441c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d20c      	bcs.n	800446c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004452:	4b22      	ldr	r3, [pc, #136]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e032      	b.n	80044d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004478:	4b19      	ldr	r3, [pc, #100]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4916      	ldr	r1, [pc, #88]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	490e      	ldr	r1, [pc, #56]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044aa:	f000 f855 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 80044ae:	4602      	mov	r2, r0
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	490a      	ldr	r1, [pc, #40]	; (80044e4 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	5ccb      	ldrb	r3, [r1, r3]
 80044be:	fa22 f303 	lsr.w	r3, r2, r3
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <HAL_RCC_ClockConfig+0x1c4>)
 80044c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044c6:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HAL_RCC_ClockConfig+0x1c8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe ffe8 	bl	80034a0 <HAL_InitTick>

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	40023c00 	.word	0x40023c00
 80044e0:	40023800 	.word	0x40023800
 80044e4:	08007b14 	.word	0x08007b14
 80044e8:	200001a4 	.word	0x200001a4
 80044ec:	200001a8 	.word	0x200001a8

080044f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	200001a4 	.word	0x200001a4

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a9b      	lsrs	r3, r3, #10
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	08007b24 	.word	0x08007b24

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004534:	f7ff ffdc 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0b5b      	lsrs	r3, r3, #13
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	08007b24 	.word	0x08007b24

08004558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b0ae      	sub	sp, #184	; 0xb8
 800455e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800457e:	4bcb      	ldr	r3, [pc, #812]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	2b0c      	cmp	r3, #12
 8004588:	f200 8206 	bhi.w	8004998 <HAL_RCC_GetSysClockFreq+0x440>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_RCC_GetSysClockFreq+0x3c>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c9 	.word	0x080045c9
 8004598:	08004999 	.word	0x08004999
 800459c:	08004999 	.word	0x08004999
 80045a0:	08004999 	.word	0x08004999
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	08004999 	.word	0x08004999
 80045ac:	08004999 	.word	0x08004999
 80045b0:	08004999 	.word	0x08004999
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	08004999 	.word	0x08004999
 80045bc:	08004999 	.word	0x08004999
 80045c0:	08004999 	.word	0x08004999
 80045c4:	080047c9 	.word	0x080047c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045c8:	4bb9      	ldr	r3, [pc, #740]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80045ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80045ce:	e1e7      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4bb8      	ldr	r3, [pc, #736]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80045d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045d6:	e1e3      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d8:	4bb4      	ldr	r3, [pc, #720]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e4:	4bb1      	ldr	r3, [pc, #708]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d071      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f0:	4bae      	ldr	r3, [pc, #696]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	099b      	lsrs	r3, r3, #6
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004608:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f04f 0000 	mov.w	r0, #0
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	0159      	lsls	r1, r3, #5
 8004624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004628:	0150      	lsls	r0, r2, #5
 800462a:	4602      	mov	r2, r0
 800462c:	460b      	mov	r3, r1
 800462e:	4621      	mov	r1, r4
 8004630:	1a51      	subs	r1, r2, r1
 8004632:	6439      	str	r1, [r7, #64]	; 0x40
 8004634:	4629      	mov	r1, r5
 8004636:	eb63 0301 	sbc.w	r3, r3, r1
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004648:	4649      	mov	r1, r9
 800464a:	018b      	lsls	r3, r1, #6
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004652:	4641      	mov	r1, r8
 8004654:	018a      	lsls	r2, r1, #6
 8004656:	4641      	mov	r1, r8
 8004658:	1a51      	subs	r1, r2, r1
 800465a:	63b9      	str	r1, [r7, #56]	; 0x38
 800465c:	4649      	mov	r1, r9
 800465e:	eb63 0301 	sbc.w	r3, r3, r1
 8004662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004670:	4649      	mov	r1, r9
 8004672:	00cb      	lsls	r3, r1, #3
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467a:	4641      	mov	r1, r8
 800467c:	00ca      	lsls	r2, r1, #3
 800467e:	4610      	mov	r0, r2
 8004680:	4619      	mov	r1, r3
 8004682:	4603      	mov	r3, r0
 8004684:	4622      	mov	r2, r4
 8004686:	189b      	adds	r3, r3, r2
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
 800468a:	462b      	mov	r3, r5
 800468c:	460a      	mov	r2, r1
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046a0:	4629      	mov	r1, r5
 80046a2:	024b      	lsls	r3, r1, #9
 80046a4:	4621      	mov	r1, r4
 80046a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046aa:	4621      	mov	r1, r4
 80046ac:	024a      	lsls	r2, r1, #9
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80046c4:	f7fb fd9e 	bl	8000204 <__aeabi_uldivmod>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4613      	mov	r3, r2
 80046ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046d2:	e067      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d4:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	099b      	lsrs	r3, r3, #6
 80046da:	2200      	movs	r2, #0
 80046dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046e0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80046e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ee:	2300      	movs	r3, #0
 80046f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80046f6:	4622      	mov	r2, r4
 80046f8:	462b      	mov	r3, r5
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	0159      	lsls	r1, r3, #5
 8004704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004708:	0150      	lsls	r0, r2, #5
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4621      	mov	r1, r4
 8004710:	1a51      	subs	r1, r2, r1
 8004712:	62b9      	str	r1, [r7, #40]	; 0x28
 8004714:	4629      	mov	r1, r5
 8004716:	eb63 0301 	sbc.w	r3, r3, r1
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004728:	4649      	mov	r1, r9
 800472a:	018b      	lsls	r3, r1, #6
 800472c:	4641      	mov	r1, r8
 800472e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004732:	4641      	mov	r1, r8
 8004734:	018a      	lsls	r2, r1, #6
 8004736:	4641      	mov	r1, r8
 8004738:	ebb2 0a01 	subs.w	sl, r2, r1
 800473c:	4649      	mov	r1, r9
 800473e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800474e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004756:	4692      	mov	sl, r2
 8004758:	469b      	mov	fp, r3
 800475a:	4623      	mov	r3, r4
 800475c:	eb1a 0303 	adds.w	r3, sl, r3
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	462b      	mov	r3, r5
 8004764:	eb4b 0303 	adc.w	r3, fp, r3
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004776:	4629      	mov	r1, r5
 8004778:	028b      	lsls	r3, r1, #10
 800477a:	4621      	mov	r1, r4
 800477c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004780:	4621      	mov	r1, r4
 8004782:	028a      	lsls	r2, r1, #10
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800478c:	2200      	movs	r2, #0
 800478e:	673b      	str	r3, [r7, #112]	; 0x70
 8004790:	677a      	str	r2, [r7, #116]	; 0x74
 8004792:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004796:	f7fb fd35 	bl	8000204 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4613      	mov	r3, r2
 80047a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b41      	ldr	r3, [pc, #260]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80047b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047c6:	e0eb      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c8:	4b38      	ldr	r3, [pc, #224]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d06b      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e0:	4b32      	ldr	r3, [pc, #200]	; (80048ac <HAL_RCC_GetSysClockFreq+0x354>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	099b      	lsrs	r3, r3, #6
 80047e6:	2200      	movs	r2, #0
 80047e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	663b      	str	r3, [r7, #96]	; 0x60
 80047f4:	2300      	movs	r3, #0
 80047f6:	667b      	str	r3, [r7, #100]	; 0x64
 80047f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80047fc:	4622      	mov	r2, r4
 80047fe:	462b      	mov	r3, r5
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	0159      	lsls	r1, r3, #5
 800480a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800480e:	0150      	lsls	r0, r2, #5
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4621      	mov	r1, r4
 8004816:	1a51      	subs	r1, r2, r1
 8004818:	61b9      	str	r1, [r7, #24]
 800481a:	4629      	mov	r1, r5
 800481c:	eb63 0301 	sbc.w	r3, r3, r1
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800482e:	4659      	mov	r1, fp
 8004830:	018b      	lsls	r3, r1, #6
 8004832:	4651      	mov	r1, sl
 8004834:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004838:	4651      	mov	r1, sl
 800483a:	018a      	lsls	r2, r1, #6
 800483c:	4651      	mov	r1, sl
 800483e:	ebb2 0801 	subs.w	r8, r2, r1
 8004842:	4659      	mov	r1, fp
 8004844:	eb63 0901 	sbc.w	r9, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004854:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004858:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800485c:	4690      	mov	r8, r2
 800485e:	4699      	mov	r9, r3
 8004860:	4623      	mov	r3, r4
 8004862:	eb18 0303 	adds.w	r3, r8, r3
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	462b      	mov	r3, r5
 800486a:	eb49 0303 	adc.w	r3, r9, r3
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800487c:	4629      	mov	r1, r5
 800487e:	024b      	lsls	r3, r1, #9
 8004880:	4621      	mov	r1, r4
 8004882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004886:	4621      	mov	r1, r4
 8004888:	024a      	lsls	r2, r1, #9
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004892:	2200      	movs	r2, #0
 8004894:	65bb      	str	r3, [r7, #88]	; 0x58
 8004896:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004898:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800489c:	f7fb fcb2 	bl	8000204 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048aa:	e065      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x420>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b8:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	2200      	movs	r2, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	4611      	mov	r1, r2
 80048c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ca:	2300      	movs	r3, #0
 80048cc:	657b      	str	r3, [r7, #84]	; 0x54
 80048ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	f04f 0100 	mov.w	r1, #0
 80048de:	0159      	lsls	r1, r3, #5
 80048e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e4:	0150      	lsls	r0, r2, #5
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4641      	mov	r1, r8
 80048ec:	1a51      	subs	r1, r2, r1
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	4649      	mov	r1, r9
 80048f2:	eb63 0301 	sbc.w	r3, r3, r1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004904:	4659      	mov	r1, fp
 8004906:	018b      	lsls	r3, r1, #6
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800490e:	4651      	mov	r1, sl
 8004910:	018a      	lsls	r2, r1, #6
 8004912:	4651      	mov	r1, sl
 8004914:	1a54      	subs	r4, r2, r1
 8004916:	4659      	mov	r1, fp
 8004918:	eb63 0501 	sbc.w	r5, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	00eb      	lsls	r3, r5, #3
 8004926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492a:	00e2      	lsls	r2, r4, #3
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	4643      	mov	r3, r8
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	464b      	mov	r3, r9
 8004938:	eb45 0303 	adc.w	r3, r5, r3
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800494a:	4629      	mov	r1, r5
 800494c:	028b      	lsls	r3, r1, #10
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004954:	4621      	mov	r1, r4
 8004956:	028a      	lsls	r2, r1, #10
 8004958:	4610      	mov	r0, r2
 800495a:	4619      	mov	r1, r3
 800495c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004960:	2200      	movs	r2, #0
 8004962:	64bb      	str	r3, [r7, #72]	; 0x48
 8004964:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800496a:	f7fb fc4b 	bl	8000204 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4613      	mov	r3, r2
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	0f1b      	lsrs	r3, r3, #28
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800498a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800498e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004996:	e003      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800499e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	37b8      	adds	r7, #184	; 0xb8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e28d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 8083 	beq.w	8004ade <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049d8:	4b94      	ldr	r3, [pc, #592]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d019      	beq.n	8004a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049e4:	4b91      	ldr	r3, [pc, #580]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d106      	bne.n	80049fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049f0:	4b8e      	ldr	r3, [pc, #568]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fc:	d00c      	beq.n	8004a18 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b8b      	ldr	r3, [pc, #556]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d112      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0a:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a16:	d10b      	bne.n	8004a30 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	4b84      	ldr	r3, [pc, #528]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d05b      	beq.n	8004adc <HAL_RCC_OscConfig+0x124>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d157      	bne.n	8004adc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e25a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d106      	bne.n	8004a48 <HAL_RCC_OscConfig+0x90>
 8004a3a:	4b7c      	ldr	r3, [pc, #496]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7b      	ldr	r2, [pc, #492]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xcc>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0xb4>
 8004a52:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b73      	ldr	r3, [pc, #460]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a72      	ldr	r2, [pc, #456]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xcc>
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6e      	ldr	r2, [pc, #440]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b6c      	ldr	r3, [pc, #432]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6b      	ldr	r2, [pc, #428]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fd4c 	bl	8003528 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fe fd48 	bl	8003528 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	; 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e21f      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b61      	ldr	r3, [pc, #388]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xdc>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fd38 	bl	8003528 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fe fd34 	bl	8003528 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e20b      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b57      	ldr	r3, [pc, #348]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x104>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d06f      	beq.n	8004bca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004aea:	4b50      	ldr	r3, [pc, #320]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004af6:	4b4d      	ldr	r3, [pc, #308]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d105      	bne.n	8004b0e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0e:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d11c      	bne.n	8004b54 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1a:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	4b41      	ldr	r3, [pc, #260]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x186>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e1d3      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3e:	4b3b      	ldr	r3, [pc, #236]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4937      	ldr	r1, [pc, #220]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b52:	e03a      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d020      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fe fce1 	bl	8003528 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fe fcdd 	bl	8003528 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e1b4      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4925      	ldr	r1, [pc, #148]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	600b      	str	r3, [r1, #0]
 8004b9c:	e015      	b.n	8004bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <HAL_RCC_OscConfig+0x278>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fcc0 	bl	8003528 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bac:	f7fe fcbc 	bl	8003528 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e193      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d036      	beq.n	8004c44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be4:	f7fe fca0 	bl	8003528 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bec:	f7fe fc9c 	bl	8003528 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e173      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_OscConfig+0x274>)
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x234>
 8004c0a:	e01b      	b.n	8004c44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fe fc89 	bl	8003528 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c18:	e00e      	b.n	8004c38 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fe fc85 	bl	8003528 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d907      	bls.n	8004c38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e15c      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	42470000 	.word	0x42470000
 8004c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c38:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ea      	bne.n	8004c1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 8097 	beq.w	8004d80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c56:	4b83      	ldr	r3, [pc, #524]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	4b7f      	ldr	r3, [pc, #508]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	4a7e      	ldr	r2, [pc, #504]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6413      	str	r3, [r2, #64]	; 0x40
 8004c72:	4b7c      	ldr	r3, [pc, #496]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b79      	ldr	r3, [pc, #484]	; (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b76      	ldr	r3, [pc, #472]	; (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a75      	ldr	r2, [pc, #468]	; (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fe fc45 	bl	8003528 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fe fc41 	bl	8003528 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e118      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b6c      	ldr	r3, [pc, #432]	; (8004e68 <HAL_RCC_OscConfig+0x4b0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x31e>
 8004cc8:	4b66      	ldr	r3, [pc, #408]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a65      	ldr	r2, [pc, #404]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	e01c      	b.n	8004d10 <HAL_RCC_OscConfig+0x358>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x340>
 8004cde:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a60      	ldr	r2, [pc, #384]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004ce4:	f043 0304 	orr.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cea:	4b5e      	ldr	r3, [pc, #376]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0x358>
 8004cf8:	4b5a      	ldr	r3, [pc, #360]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	4a59      	ldr	r2, [pc, #356]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6713      	str	r3, [r2, #112]	; 0x70
 8004d04:	4b57      	ldr	r3, [pc, #348]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d08:	4a56      	ldr	r2, [pc, #344]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d0a:	f023 0304 	bic.w	r3, r3, #4
 8004d0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d015      	beq.n	8004d44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fe fc06 	bl	8003528 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d20:	f7fe fc02 	bl	8003528 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0d7      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d36:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RCC_OscConfig+0x368>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fe fbf0 	bl	8003528 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fbec 	bl	8003528 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0c1      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d62:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ee      	bne.n	8004d4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d105      	bne.n	8004d80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80ad 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d060      	beq.n	8004e58 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d145      	bne.n	8004e2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fe fbc0 	bl	8003528 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fe fbbc 	bl	8003528 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e093      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	019b      	lsls	r3, r3, #6
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	3b01      	subs	r3, #1
 8004de4:	041b      	lsls	r3, r3, #16
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	061b      	lsls	r3, r3, #24
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	491b      	ldr	r1, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe fb91 	bl	8003528 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fe fb8d 	bl	8003528 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e064      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e1c:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x452>
 8004e28:	e05c      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_RCC_OscConfig+0x4b4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fb7a 	bl	8003528 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fe fb76 	bl	8003528 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e04d      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_RCC_OscConfig+0x4ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x480>
 8004e56:	e045      	b.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e040      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40007000 	.word	0x40007000
 8004e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e70:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <HAL_RCC_OscConfig+0x538>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d030      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d129      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d122      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d119      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb6:	085b      	lsrs	r3, r3, #1
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40023800 	.word	0x40023800

08004ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e041      	b.n	8004f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fd fee8 	bl	8002cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f000 fee8 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e04e      	b.n	800504a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a23      	ldr	r2, [pc, #140]	; (8005058 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d022      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d01d      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <HAL_TIM_Base_Start_IT+0xc8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d018      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_Base_Start_IT+0xcc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d009      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <HAL_TIM_Base_Start_IT+0xd8>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x80>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_TIM_Base_Start_IT+0xdc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d111      	bne.n	8005038 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d010      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005036:	e007      	b.n	8005048 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40001800 	.word	0x40001800

08005074 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a1a      	ldr	r2, [r3, #32]
 8005092:	f241 1311 	movw	r3, #4369	; 0x1111
 8005096:	4013      	ands	r3, r2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <HAL_TIM_Base_Stop_IT+0x48>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1a      	ldr	r2, [r3, #32]
 80050a2:	f240 4344 	movw	r3, #1092	; 0x444
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_Base_Stop_IT+0x48>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e041      	b.n	8005168 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fd fdbb 	bl	8002c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f000 fdf9 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x24>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e022      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e015      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x58>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e008      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07c      	b.n	80052dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x82>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f0:	e013      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0x92>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005200:	e00b      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xa2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005210:	e003      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f85a 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HAL_TIM_PWM_Start+0x174>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_PWM_Start+0xcc>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <HAL_TIM_PWM_Start+0x178>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_TIM_PWM_Start+0xd0>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_Start+0xd2>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_TIM_PWM_Start+0x174>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d01d      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <HAL_TIM_PWM_Start+0x17c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_TIM_PWM_Start+0x180>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <HAL_TIM_PWM_Start+0x184>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <HAL_TIM_PWM_Start+0x178>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_TIM_PWM_Start+0x188>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a16      	ldr	r2, [pc, #88]	; (80052fc <HAL_TIM_PWM_Start+0x18c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d010      	beq.n	80052da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	e007      	b.n	80052da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d109      	bne.n	8005328 <HAL_TIM_PWM_Start_IT+0x28>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b01      	cmp	r3, #1
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e022      	b.n	800536e <HAL_TIM_PWM_Start_IT+0x6e>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d109      	bne.n	8005342 <HAL_TIM_PWM_Start_IT+0x42>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e015      	b.n	800536e <HAL_TIM_PWM_Start_IT+0x6e>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d109      	bne.n	800535c <HAL_TIM_PWM_Start_IT+0x5c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	e008      	b.n	800536e <HAL_TIM_PWM_Start_IT+0x6e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0c7      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start_IT+0x86>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005384:	e013      	b.n	80053ae <HAL_TIM_PWM_Start_IT+0xae>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start_IT+0x96>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005394:	e00b      	b.n	80053ae <HAL_TIM_PWM_Start_IT+0xae>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start_IT+0xa6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	e003      	b.n	80053ae <HAL_TIM_PWM_Start_IT+0xae>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d841      	bhi.n	8005438 <HAL_TIM_PWM_Start_IT+0x138>
 80053b4:	a201      	add	r2, pc, #4	; (adr r2, 80053bc <HAL_TIM_PWM_Start_IT+0xbc>)
 80053b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ba:	bf00      	nop
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	08005439 	.word	0x08005439
 80053c4:	08005439 	.word	0x08005439
 80053c8:	08005439 	.word	0x08005439
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005439 	.word	0x08005439
 80053d4:	08005439 	.word	0x08005439
 80053d8:	08005439 	.word	0x08005439
 80053dc:	08005415 	.word	0x08005415
 80053e0:	08005439 	.word	0x08005439
 80053e4:	08005439 	.word	0x08005439
 80053e8:	08005439 	.word	0x08005439
 80053ec:	08005427 	.word	0x08005427
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0202 	orr.w	r2, r2, #2
 80053fe:	60da      	str	r2, [r3, #12]
      break;
 8005400:	e01d      	b.n	800543e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0204 	orr.w	r2, r2, #4
 8005410:	60da      	str	r2, [r3, #12]
      break;
 8005412:	e014      	b.n	800543e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	60da      	str	r2, [r3, #12]
      break;
 8005424:	e00b      	b.n	800543e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0210 	orr.w	r2, r2, #16
 8005434:	60da      	str	r2, [r3, #12]
      break;
 8005436:	e002      	b.n	800543e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
      break;
 800543c:	bf00      	nop
  }

  if (status == HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d15f      	bne.n	8005504 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2201      	movs	r2, #1
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 ff45 	bl	80062dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <HAL_TIM_PWM_Start_IT+0x210>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIM_PWM_Start_IT+0x166>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <HAL_TIM_PWM_Start_IT+0x214>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_Start_IT+0x16a>
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_TIM_PWM_Start_IT+0x16c>
 800546a:	2300      	movs	r3, #0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <HAL_TIM_PWM_Start_IT+0x210>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d022      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d01d      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <HAL_TIM_PWM_Start_IT+0x218>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_TIM_PWM_Start_IT+0x21c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d013      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_TIM_PWM_Start_IT+0x220>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d00e      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <HAL_TIM_PWM_Start_IT+0x214>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_TIM_PWM_Start_IT+0x224>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a17      	ldr	r2, [pc, #92]	; (8005528 <HAL_TIM_PWM_Start_IT+0x228>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d111      	bne.n	80054f4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b06      	cmp	r3, #6
 80054e0:	d010      	beq.n	8005504 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f2:	e007      	b.n	8005504 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40001800 	.word	0x40001800

0800552c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e097      	b.n	8005670 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fd fc6f 	bl	8002e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005570:	f023 0307 	bic.w	r3, r3, #7
 8005574:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 fbc1 	bl	8005d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	4313      	orrs	r3, r2
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055cc:	f023 030c 	bic.w	r3, r3, #12
 80055d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	4313      	orrs	r3, r2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	4313      	orrs	r3, r2
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800560a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	4313      	orrs	r3, r2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005688:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005690:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005698:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d110      	bne.n	80056ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d102      	bne.n	80056b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ae:	7b7b      	ldrb	r3, [r7, #13]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e069      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	e031      	b.n	800572e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d110      	bne.n	80056f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d0:	7bbb      	ldrb	r3, [r7, #14]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d102      	bne.n	80056dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056d6:	7b3b      	ldrb	r3, [r7, #12]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d001      	beq.n	80056e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e055      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f0:	e01d      	b.n	800572e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d108      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d105      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fe:	7b7b      	ldrb	r3, [r7, #13]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d102      	bne.n	800570a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005704:	7b3b      	ldrb	r3, [r7, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e03e      	b.n	800578c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_TIM_Encoder_Start+0xc4>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d008      	beq.n	800574c <HAL_TIM_Encoder_Start+0xd4>
 800573a:	e00f      	b.n	800575c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f000 fdc9 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 800574a:	e016      	b.n	800577a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2201      	movs	r2, #1
 8005752:	2104      	movs	r1, #4
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fdc1 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 800575a:	e00e      	b.n	800577a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fdb9 	bl	80062dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2201      	movs	r2, #1
 8005770:	2104      	movs	r1, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fdb2 	bl	80062dc <TIM_CCxChannelCmd>
      break;
 8005778:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa77 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa69 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa7a 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0204 	mvn.w	r2, #4
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa4d 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa3f 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa50 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa23 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa15 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa26 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f9f9 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9eb 	bl	8005cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9fc 	bl	8005cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb fe52 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fdca 	bl	80064d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b40      	cmp	r3, #64	; 0x40
 8005950:	d10e      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d107      	bne.n	8005970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f9c1 	bl	8005cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b20      	cmp	r3, #32
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b20      	cmp	r3, #32
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0220 	mvn.w	r2, #32
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fd94 	bl	80064c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0ae      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	f200 809f 	bhi.w	8005b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005b11 	.word	0x08005b11
 80059e0:	08005b11 	.word	0x08005b11
 80059e4:	08005b11 	.word	0x08005b11
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005b11 	.word	0x08005b11
 80059f0:	08005b11 	.word	0x08005b11
 80059f4:	08005b11 	.word	0x08005b11
 80059f8:	08005a8f 	.word	0x08005a8f
 80059fc:	08005b11 	.word	0x08005b11
 8005a00:	08005b11 	.word	0x08005b11
 8005a04:	08005b11 	.word	0x08005b11
 8005a08:	08005acf 	.word	0x08005acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fa18 	bl	8005e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0208 	orr.w	r2, r2, #8
 8005a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6999      	ldr	r1, [r3, #24]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	619a      	str	r2, [r3, #24]
      break;
 8005a4a:	e064      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fa68 	bl	8005f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	619a      	str	r2, [r3, #24]
      break;
 8005a8c:	e043      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fabd 	bl	8006014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0204 	bic.w	r2, r2, #4
 8005ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	61da      	str	r2, [r3, #28]
      break;
 8005acc:	e023      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fb11 	bl	80060fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	021a      	lsls	r2, r3, #8
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	61da      	str	r2, [r3, #28]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_ConfigClockSource+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0b4      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x186>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7c:	d03e      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0xd4>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	f200 8087 	bhi.w	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	f000 8086 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x172>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d87f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b70      	cmp	r3, #112	; 0x70
 8005b96:	d01a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0xa6>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d87b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b60      	cmp	r3, #96	; 0x60
 8005b9e:	d050      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d877      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b50      	cmp	r3, #80	; 0x50
 8005ba6:	d03c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d873      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d058      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d86f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d064      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d86b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d060      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d867      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d05a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	e062      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f000 fb5d 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
      break;
 8005bfa:	e04f      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6899      	ldr	r1, [r3, #8]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f000 fb46 	bl	800629c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1e:	609a      	str	r2, [r3, #8]
      break;
 8005c20:	e03c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 faba 	bl	80061a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2150      	movs	r1, #80	; 0x50
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fb13 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e02c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 fad9 	bl	8006206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2160      	movs	r1, #96	; 0x60
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fb03 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e01c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 fa9a 	bl	80061a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 faf3 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e00c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 faea 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
	...

08005d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a40      	ldr	r2, [pc, #256]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d26:	d00f      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3d      	ldr	r2, [pc, #244]	; (8005e20 <TIM_Base_SetConfig+0x118>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3b      	ldr	r2, [pc, #236]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3a      	ldr	r2, [pc, #232]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2f      	ldr	r2, [pc, #188]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02b      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d027      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <TIM_Base_SetConfig+0x118>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d023      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2b      	ldr	r2, [pc, #172]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01f      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01b      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d017      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a27      	ldr	r2, [pc, #156]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <TIM_Base_SetConfig+0x130>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a25      	ldr	r2, [pc, #148]	; (8005e3c <TIM_Base_SetConfig+0x134>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <TIM_Base_SetConfig+0x138>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <TIM_Base_SetConfig+0x13c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a0c      	ldr	r2, [pc, #48]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40010400 	.word	0x40010400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800
 8005e3c:	40001800 	.word	0x40001800
 8005e40:	40001c00 	.word	0x40001c00
 8005e44:	40002000 	.word	0x40002000

08005e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0201 	bic.w	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0302 	bic.w	r3, r3, #2
 8005e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a20      	ldr	r2, [pc, #128]	; (8005f20 <TIM_OC1_SetConfig+0xd8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d003      	beq.n	8005eac <TIM_OC1_SetConfig+0x64>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <TIM_OC1_SetConfig+0xdc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d10c      	bne.n	8005ec6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f023 0308 	bic.w	r3, r3, #8
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 0304 	bic.w	r3, r3, #4
 8005ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	; (8005f20 <TIM_OC1_SetConfig+0xd8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC1_SetConfig+0x8e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <TIM_OC1_SetConfig+0xdc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d111      	bne.n	8005efa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0210 	bic.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 0320 	bic.w	r3, r3, #32
 8005f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a22      	ldr	r2, [pc, #136]	; (800600c <TIM_OC2_SetConfig+0xe4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_OC2_SetConfig+0x68>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a21      	ldr	r2, [pc, #132]	; (8006010 <TIM_OC2_SetConfig+0xe8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10d      	bne.n	8005fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a17      	ldr	r2, [pc, #92]	; (800600c <TIM_OC2_SetConfig+0xe4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d003      	beq.n	8005fbc <TIM_OC2_SetConfig+0x94>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC2_SetConfig+0xe8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d113      	bne.n	8005fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800605c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <TIM_OC3_SetConfig+0xe0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_OC3_SetConfig+0x66>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <TIM_OC3_SetConfig+0xe4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d10d      	bne.n	8006096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	021b      	lsls	r3, r3, #8
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <TIM_OC3_SetConfig+0xe0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_OC3_SetConfig+0x92>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a15      	ldr	r2, [pc, #84]	; (80060f8 <TIM_OC3_SetConfig+0xe4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d113      	bne.n	80060ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40010400 	.word	0x40010400

080060fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	021b      	lsls	r3, r3, #8
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <TIM_OC4_SetConfig+0xa4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC4_SetConfig+0x68>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <TIM_OC4_SetConfig+0xa8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d109      	bne.n	8006178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800616a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	019b      	lsls	r3, r3, #6
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40010000 	.word	0x40010000
 80061a4:	40010400 	.word	0x40010400

080061a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0201 	bic.w	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 030a 	bic.w	r3, r3, #10
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f023 0210 	bic.w	r2, r3, #16
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	031b      	lsls	r3, r3, #12
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	f043 0307 	orr.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2201      	movs	r2, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1a      	ldr	r2, [r3, #32]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800633c:	2302      	movs	r3, #2
 800633e:	e05a      	b.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a21      	ldr	r2, [pc, #132]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d022      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638c:	d01d      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1d      	ldr	r2, [pc, #116]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d018      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1b      	ldr	r2, [pc, #108]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1a      	ldr	r2, [pc, #104]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d10c      	bne.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40010000 	.word	0x40010000
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40010400 	.word	0x40010400
 8006418:	40014000 	.word	0x40014000
 800641c:	40001800 	.word	0x40001800

08006420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006434:	2b01      	cmp	r3, #1
 8006436:	d101      	bne.n	800643c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006438:	2302      	movs	r3, #2
 800643a:	e03d      	b.n	80064b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4313      	orrs	r3, r2
 800647a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e03f      	b.n	800657e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fc fd70 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2224      	movs	r2, #36	; 0x24
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800652e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f843 	bl	80075bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b08a      	sub	sp, #40	; 0x28
 800658a:	af02      	add	r7, sp, #8
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d17c      	bne.n	80066a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_UART_Transmit+0x2c>
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e075      	b.n	80066a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Transmit+0x3e>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e06e      	b.n	80066a2 <HAL_UART_Transmit+0x11c>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2221      	movs	r2, #33	; 0x21
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065da:	f7fc ffa5 	bl	8003528 <HAL_GetTick>
 80065de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f4:	d108      	bne.n	8006608 <HAL_UART_Transmit+0x82>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	e003      	b.n	8006610 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006618:	e02a      	b.n	8006670 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2200      	movs	r2, #0
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fcfa 	bl	800701e <UART_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e036      	b.n	80066a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006648:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	3302      	adds	r3, #2
 800664e:	61bb      	str	r3, [r7, #24]
 8006650:	e007      	b.n	8006662 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	781a      	ldrb	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	3301      	adds	r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1cf      	bne.n	800661a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2200      	movs	r2, #0
 8006682:	2140      	movs	r1, #64	; 0x40
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fcca 	bl	800701e <UART_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e006      	b.n	80066a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3720      	adds	r7, #32
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d165      	bne.n	8006792 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_UART_Transmit_DMA+0x26>
 80066cc:	88fb      	ldrh	r3, [r7, #6]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e05e      	b.n	8006794 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_UART_Transmit_DMA+0x38>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e057      	b.n	8006794 <HAL_UART_Transmit_DMA+0xe8>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	88fa      	ldrh	r2, [r7, #6]
 80066fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2221      	movs	r2, #33	; 0x21
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_UART_Transmit_DMA+0xf0>)
 8006712:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_UART_Transmit_DMA+0xf4>)
 800671a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <HAL_UART_Transmit_DMA+0xf8>)
 8006722:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	2200      	movs	r2, #0
 800672a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800672c:	f107 0308 	add.w	r3, r7, #8
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	6819      	ldr	r1, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3304      	adds	r3, #4
 8006740:	461a      	mov	r2, r3
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	f7fd f8bc 	bl	80038c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006750:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3314      	adds	r3, #20
 8006760:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	617b      	str	r3, [r7, #20]
   return(result);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800677a:	627a      	str	r2, [r7, #36]	; 0x24
 800677c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6a39      	ldr	r1, [r7, #32]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	61fb      	str	r3, [r7, #28]
   return(result);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006792:	2302      	movs	r3, #2
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	3730      	adds	r7, #48	; 0x30
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	08006d79 	.word	0x08006d79
 80067a0:	08006e13 	.word	0x08006e13
 80067a4:	08006f8b 	.word	0x08006f8b

080067a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	4613      	mov	r3, r2
 80067b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d11d      	bne.n	80067fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_UART_Receive_DMA+0x26>
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e016      	b.n	8006800 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_UART_Receive_DMA+0x38>
 80067dc:	2302      	movs	r3, #2
 80067de:	e00f      	b.n	8006800 <HAL_UART_Receive_DMA+0x58>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	461a      	mov	r2, r3
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fc81 	bl	80070fc <UART_Start_Receive_DMA>
 80067fa:	4603      	mov	r3, r0
 80067fc:	e000      	b.n	8006800 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b0ba      	sub	sp, #232	; 0xe8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800682e:	2300      	movs	r3, #0
 8006830:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006834:	2300      	movs	r3, #0
 8006836:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800683a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10f      	bne.n	800686e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006852:	f003 0320 	and.w	r3, r3, #32
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_UART_IRQHandler+0x66>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685e:	f003 0320 	and.w	r3, r3, #32
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fded 	bl	8007446 <UART_Receive_IT>
      return;
 800686c:	e256      	b.n	8006d1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800686e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80de 	beq.w	8006a34 <HAL_UART_IRQHandler+0x22c>
 8006878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 80d1 	beq.w	8006a34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <HAL_UART_IRQHandler+0xae>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0201 	orr.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_UART_IRQHandler+0xd2>
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f043 0202 	orr.w	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00b      	beq.n	80068fe <HAL_UART_IRQHandler+0xf6>
 80068e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0204 	orr.w	r2, r3, #4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d011      	beq.n	800692e <HAL_UART_IRQHandler+0x126>
 800690a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f043 0208 	orr.w	r2, r3, #8
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 81ed 	beq.w	8006d12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693c:	f003 0320 	and.w	r3, r3, #32
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_UART_IRQHandler+0x14e>
 8006944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	2b00      	cmp	r3, #0
 800694e:	d002      	beq.n	8006956 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fd78 	bl	8007446 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	bf0c      	ite	eq
 8006964:	2301      	moveq	r3, #1
 8006966:	2300      	movne	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d103      	bne.n	8006982 <HAL_UART_IRQHandler+0x17a>
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697e:	2b00      	cmp	r3, #0
 8006980:	d04f      	beq.n	8006a22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fc80 	bl	8007288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d141      	bne.n	8006a1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1d9      	bne.n	8006996 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d013      	beq.n	8006a12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	4a7d      	ldr	r2, [pc, #500]	; (8006be4 <HAL_UART_IRQHandler+0x3dc>)
 80069f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd f82a 	bl	8003a50 <HAL_DMA_Abort_IT>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a10:	e00e      	b.n	8006a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f99a 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a18:	e00a      	b.n	8006a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f996 	bl	8006d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	e006      	b.n	8006a30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f992 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a2e:	e170      	b.n	8006d12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	bf00      	nop
    return;
 8006a32:	e16e      	b.n	8006d12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	f040 814a 	bne.w	8006cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8143 	beq.w	8006cd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 813c 	beq.w	8006cd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7a:	2b40      	cmp	r3, #64	; 0x40
 8006a7c:	f040 80b4 	bne.w	8006be8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8140 	beq.w	8006d16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	f080 8139 	bcs.w	8006d16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab6:	f000 8088 	beq.w	8006bca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	330c      	adds	r3, #12
 8006ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1d9      	bne.n	8006aba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3314      	adds	r3, #20
 8006b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b18:	f023 0301 	bic.w	r3, r3, #1
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e1      	bne.n	8006b06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	3314      	adds	r3, #20
 8006b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3314      	adds	r3, #20
 8006b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9a:	f023 0310 	bic.w	r3, r3, #16
 8006b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bac:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e3      	bne.n	8006b88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fc fed3 	bl	8003970 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f8c0 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be0:	e099      	b.n	8006d16 <HAL_UART_IRQHandler+0x50e>
 8006be2:	bf00      	nop
 8006be4:	0800734f 	.word	0x0800734f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 808b 	beq.w	8006d1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8086 	beq.w	8006d1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c32:	647a      	str	r2, [r7, #68]	; 0x44
 8006c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e3      	bne.n	8006c0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	623b      	str	r3, [r7, #32]
   return(result);
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e3      	bne.n	8006c46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cb0:	61fa      	str	r2, [r7, #28]
 8006cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e3      	bne.n	8006c8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f848 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cd0:	e023      	b.n	8006d1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d009      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x4ea>
 8006cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fb43 	bl	8007376 <UART_Transmit_IT>
    return;
 8006cf0:	e014      	b.n	8006d1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <HAL_UART_IRQHandler+0x514>
 8006cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb83 	bl	8007416 <UART_EndTransmit_IT>
    return;
 8006d10:	e004      	b.n	8006d1c <HAL_UART_IRQHandler+0x514>
    return;
 8006d12:	bf00      	nop
 8006d14:	e002      	b.n	8006d1c <HAL_UART_IRQHandler+0x514>
      return;
 8006d16:	bf00      	nop
 8006d18:	e000      	b.n	8006d1c <HAL_UART_IRQHandler+0x514>
      return;
 8006d1a:	bf00      	nop
  }
}
 8006d1c:	37e8      	adds	r7, #232	; 0xe8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop

08006d24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b090      	sub	sp, #64	; 0x40
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d137      	bne.n	8006e04 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	2200      	movs	r2, #0
 8006d98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	623b      	str	r3, [r7, #32]
   return(result);
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3314      	adds	r3, #20
 8006db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dba:	633a      	str	r2, [r7, #48]	; 0x30
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc2:	e841 2300 	strex	r3, r2, [r1]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1e5      	bne.n	8006d9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
 8006de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	330c      	adds	r3, #12
 8006dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dee:	61fa      	str	r2, [r7, #28]
 8006df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	69b9      	ldr	r1, [r7, #24]
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e02:	e002      	b.n	8006e0a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e06:	f7f9 fd35 	bl	8000874 <HAL_UART_TxCpltCallback>
}
 8006e0a:	bf00      	nop
 8006e0c:	3740      	adds	r7, #64	; 0x40
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff ff7f 	bl	8006d24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b09c      	sub	sp, #112	; 0x70
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d172      	bne.n	8006f30 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	330c      	adds	r3, #12
 8006e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e70:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e5      	bne.n	8006e50 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3314      	adds	r3, #20
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3314      	adds	r3, #20
 8006ea2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ea4:	647a      	str	r2, [r7, #68]	; 0x44
 8006ea6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e5      	bne.n	8006e84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3314      	adds	r3, #20
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	e853 3f00 	ldrex	r3, [r3]
 8006ec6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ece:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3314      	adds	r3, #20
 8006ed6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ed8:	633a      	str	r2, [r7, #48]	; 0x30
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e5      	bne.n	8006eb8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d119      	bne.n	8006f30 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0310 	bic.w	r3, r3, #16
 8006f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f1c:	61fa      	str	r2, [r7, #28]
 8006f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	69b9      	ldr	r1, [r7, #24]
 8006f22:	69fa      	ldr	r2, [r7, #28]
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	617b      	str	r3, [r7, #20]
   return(result);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d106      	bne.n	8006f46 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f40:	f7ff ff0e 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f44:	e002      	b.n	8006f4c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f46:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f48:	f7f9 fcca 	bl	80008e0 <HAL_UART_RxCpltCallback>
}
 8006f4c:	bf00      	nop
 8006f4e:	3770      	adds	r7, #112	; 0x70
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d108      	bne.n	8006f7c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f7ff fef3 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f7a:	e002      	b.n	8006f82 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff fedb 	bl	8006d38 <HAL_UART_RxHalfCpltCallback>
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	2b80      	cmp	r3, #128	; 0x80
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b21      	cmp	r3, #33	; 0x21
 8006fbc:	d108      	bne.n	8006fd0 <UART_DMAError+0x46>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fca:	68b8      	ldr	r0, [r7, #8]
 8006fcc:	f000 f934 	bl	8007238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b22      	cmp	r3, #34	; 0x22
 8006ff0:	d108      	bne.n	8007004 <UART_DMAError+0x7a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	f000 f942 	bl	8007288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f043 0210 	orr.w	r2, r3, #16
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007010:	68b8      	ldr	r0, [r7, #8]
 8007012:	f7ff fe9b 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b090      	sub	sp, #64	; 0x40
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702e:	e050      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007036:	d04c      	beq.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <UART_WaitOnFlagUntilTimeout+0x30>
 800703e:	f7fc fa73 	bl	8003528 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800704a:	429a      	cmp	r2, r3
 800704c:	d241      	bcs.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800706e:	637a      	str	r2, [r7, #52]	; 0x34
 8007070:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3314      	adds	r3, #20
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3314      	adds	r3, #20
 80070a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a2:	623a      	str	r2, [r7, #32]
 80070a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e00f      	b.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d09f      	beq.n	8007030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3740      	adds	r7, #64	; 0x40
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b098      	sub	sp, #96	; 0x60
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2222      	movs	r2, #34	; 0x22
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	4a40      	ldr	r2, [pc, #256]	; (800722c <UART_Start_Receive_DMA+0x130>)
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	4a3f      	ldr	r2, [pc, #252]	; (8007230 <UART_Start_Receive_DMA+0x134>)
 8007132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	4a3e      	ldr	r2, [pc, #248]	; (8007234 <UART_Start_Receive_DMA+0x138>)
 800713a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007140:	2200      	movs	r2, #0
 8007142:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007144:	f107 0308 	add.w	r3, r7, #8
 8007148:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	88fb      	ldrh	r3, [r7, #6]
 800715c:	f7fc fbb0 	bl	80038c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007160:	2300      	movs	r3, #0
 8007162:	613b      	str	r3, [r7, #16]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d019      	beq.n	80071ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330c      	adds	r3, #12
 800718c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800719c:	65bb      	str	r3, [r7, #88]	; 0x58
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	330c      	adds	r3, #12
 80071a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80071ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e5      	bne.n	8007186 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3314      	adds	r3, #20
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c4:	e853 3f00 	ldrex	r3, [r3]
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	657b      	str	r3, [r7, #84]	; 0x54
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071da:	63ba      	str	r2, [r7, #56]	; 0x38
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e5      	bne.n	80071ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	617b      	str	r3, [r7, #20]
   return(result);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007204:	653b      	str	r3, [r7, #80]	; 0x50
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3314      	adds	r3, #20
 800720c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800720e:	627a      	str	r2, [r7, #36]	; 0x24
 8007210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6a39      	ldr	r1, [r7, #32]
 8007214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	61fb      	str	r3, [r7, #28]
   return(result);
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3760      	adds	r7, #96	; 0x60
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	08006e2f 	.word	0x08006e2f
 8007230:	08006f55 	.word	0x08006f55
 8007234:	08006f8b 	.word	0x08006f8b

08007238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	; 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	330c      	adds	r3, #12
 8007246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	61ba      	str	r2, [r7, #24]
 8007262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6979      	ldr	r1, [r7, #20]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	613b      	str	r3, [r7, #16]
   return(result);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e5      	bne.n	8007240 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800727c:	bf00      	nop
 800727e:	3724      	adds	r7, #36	; 0x24
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007288:	b480      	push	{r7}
 800728a:	b095      	sub	sp, #84	; 0x54
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	330c      	adds	r3, #12
 8007296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072b0:	643a      	str	r2, [r7, #64]	; 0x40
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e5      	bne.n	8007290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3314      	adds	r3, #20
 80072ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6a3b      	ldr	r3, [r7, #32]
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	f023 0301 	bic.w	r3, r3, #1
 80072da:	64bb      	str	r3, [r7, #72]	; 0x48
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ec:	e841 2300 	strex	r3, r2, [r1]
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e5      	bne.n	80072c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d119      	bne.n	8007334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	647b      	str	r3, [r7, #68]	; 0x44
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007320:	61ba      	str	r2, [r7, #24]
 8007322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	613b      	str	r3, [r7, #16]
   return(result);
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007342:	bf00      	nop
 8007344:	3754      	adds	r7, #84	; 0x54
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff fcef 	bl	8006d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007376:	b480      	push	{r7}
 8007378:	b085      	sub	sp, #20
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b21      	cmp	r3, #33	; 0x21
 8007388:	d13e      	bne.n	8007408 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007392:	d114      	bne.n	80073be <UART_Transmit_IT+0x48>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d110      	bne.n	80073be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	1c9a      	adds	r2, r3, #2
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	621a      	str	r2, [r3, #32]
 80073bc:	e008      	b.n	80073d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	1c59      	adds	r1, r3, #1
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6211      	str	r1, [r2, #32]
 80073c8:	781a      	ldrb	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29b      	uxth	r3, r3
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4619      	mov	r1, r3
 80073de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10f      	bne.n	8007404 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007402:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	e000      	b.n	800740a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007408:	2302      	movs	r3, #2
  }
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7f9 fa1c 	bl	8000874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b08c      	sub	sp, #48	; 0x30
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b22      	cmp	r3, #34	; 0x22
 8007458:	f040 80ab 	bne.w	80075b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007464:	d117      	bne.n	8007496 <UART_Receive_IT+0x50>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d113      	bne.n	8007496 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007484:	b29a      	uxth	r2, r3
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28
 8007494:	e026      	b.n	80074e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a8:	d007      	beq.n	80074ba <UART_Receive_IT+0x74>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <UART_Receive_IT+0x82>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d106      	bne.n	80074c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	e008      	b.n	80074da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	4619      	mov	r1, r3
 80074f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d15a      	bne.n	80075ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0220 	bic.w	r2, r2, #32
 8007506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695a      	ldr	r2, [r3, #20]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0201 	bic.w	r2, r2, #1
 8007526:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	2b01      	cmp	r3, #1
 8007536:	d135      	bne.n	80075a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	613b      	str	r3, [r7, #16]
   return(result);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f023 0310 	bic.w	r3, r3, #16
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	330c      	adds	r3, #12
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	623a      	str	r2, [r7, #32]
 8007560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	69f9      	ldr	r1, [r7, #28]
 8007564:	6a3a      	ldr	r2, [r7, #32]
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	61bb      	str	r3, [r7, #24]
   return(result);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b10      	cmp	r3, #16
 800757e:	d10a      	bne.n	8007596 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fbdf 	bl	8006d60 <HAL_UARTEx_RxEventCallback>
 80075a2:	e002      	b.n	80075aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7f9 f99b 	bl	80008e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e002      	b.n	80075b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e000      	b.n	80075b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075b2:	2302      	movs	r3, #2
  }
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3730      	adds	r7, #48	; 0x30
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c0:	b0c0      	sub	sp, #256	; 0x100
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	68d9      	ldr	r1, [r3, #12]
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	ea40 0301 	orr.w	r3, r0, r1
 80075e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	431a      	orrs	r2, r3
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007614:	f021 010c 	bic.w	r1, r1, #12
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007622:	430b      	orrs	r3, r1
 8007624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007636:	6999      	ldr	r1, [r3, #24]
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	ea40 0301 	orr.w	r3, r0, r1
 8007642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	4b8f      	ldr	r3, [pc, #572]	; (8007888 <UART_SetConfig+0x2cc>)
 800764c:	429a      	cmp	r2, r3
 800764e:	d005      	beq.n	800765c <UART_SetConfig+0xa0>
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b8d      	ldr	r3, [pc, #564]	; (800788c <UART_SetConfig+0x2d0>)
 8007658:	429a      	cmp	r2, r3
 800765a:	d104      	bne.n	8007666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800765c:	f7fc ff68 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
 8007660:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007664:	e003      	b.n	800766e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007666:	f7fc ff4f 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 800766a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800766e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007678:	f040 810c 	bne.w	8007894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800767c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007680:	2200      	movs	r2, #0
 8007682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007686:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800768a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800768e:	4622      	mov	r2, r4
 8007690:	462b      	mov	r3, r5
 8007692:	1891      	adds	r1, r2, r2
 8007694:	65b9      	str	r1, [r7, #88]	; 0x58
 8007696:	415b      	adcs	r3, r3
 8007698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800769a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800769e:	4621      	mov	r1, r4
 80076a0:	eb12 0801 	adds.w	r8, r2, r1
 80076a4:	4629      	mov	r1, r5
 80076a6:	eb43 0901 	adc.w	r9, r3, r1
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	f04f 0300 	mov.w	r3, #0
 80076b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076be:	4690      	mov	r8, r2
 80076c0:	4699      	mov	r9, r3
 80076c2:	4623      	mov	r3, r4
 80076c4:	eb18 0303 	adds.w	r3, r8, r3
 80076c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076cc:	462b      	mov	r3, r5
 80076ce:	eb49 0303 	adc.w	r3, r9, r3
 80076d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076ea:	460b      	mov	r3, r1
 80076ec:	18db      	adds	r3, r3, r3
 80076ee:	653b      	str	r3, [r7, #80]	; 0x50
 80076f0:	4613      	mov	r3, r2
 80076f2:	eb42 0303 	adc.w	r3, r2, r3
 80076f6:	657b      	str	r3, [r7, #84]	; 0x54
 80076f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80076fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007700:	f7f8 fd80 	bl	8000204 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4b61      	ldr	r3, [pc, #388]	; (8007890 <UART_SetConfig+0x2d4>)
 800770a:	fba3 2302 	umull	r2, r3, r3, r2
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	011c      	lsls	r4, r3, #4
 8007712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007716:	2200      	movs	r2, #0
 8007718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800771c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007724:	4642      	mov	r2, r8
 8007726:	464b      	mov	r3, r9
 8007728:	1891      	adds	r1, r2, r2
 800772a:	64b9      	str	r1, [r7, #72]	; 0x48
 800772c:	415b      	adcs	r3, r3
 800772e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007734:	4641      	mov	r1, r8
 8007736:	eb12 0a01 	adds.w	sl, r2, r1
 800773a:	4649      	mov	r1, r9
 800773c:	eb43 0b01 	adc.w	fp, r3, r1
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800774c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007754:	4692      	mov	sl, r2
 8007756:	469b      	mov	fp, r3
 8007758:	4643      	mov	r3, r8
 800775a:	eb1a 0303 	adds.w	r3, sl, r3
 800775e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007762:	464b      	mov	r3, r9
 8007764:	eb4b 0303 	adc.w	r3, fp, r3
 8007768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007778:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800777c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007780:	460b      	mov	r3, r1
 8007782:	18db      	adds	r3, r3, r3
 8007784:	643b      	str	r3, [r7, #64]	; 0x40
 8007786:	4613      	mov	r3, r2
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	647b      	str	r3, [r7, #68]	; 0x44
 800778e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007796:	f7f8 fd35 	bl	8000204 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	4b3b      	ldr	r3, [pc, #236]	; (8007890 <UART_SetConfig+0x2d4>)
 80077a2:	fba3 2301 	umull	r2, r3, r3, r1
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	2264      	movs	r2, #100	; 0x64
 80077aa:	fb02 f303 	mul.w	r3, r2, r3
 80077ae:	1acb      	subs	r3, r1, r3
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077b6:	4b36      	ldr	r3, [pc, #216]	; (8007890 <UART_SetConfig+0x2d4>)
 80077b8:	fba3 2302 	umull	r2, r3, r3, r2
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077c4:	441c      	add	r4, r3
 80077c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077d8:	4642      	mov	r2, r8
 80077da:	464b      	mov	r3, r9
 80077dc:	1891      	adds	r1, r2, r2
 80077de:	63b9      	str	r1, [r7, #56]	; 0x38
 80077e0:	415b      	adcs	r3, r3
 80077e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077e8:	4641      	mov	r1, r8
 80077ea:	1851      	adds	r1, r2, r1
 80077ec:	6339      	str	r1, [r7, #48]	; 0x30
 80077ee:	4649      	mov	r1, r9
 80077f0:	414b      	adcs	r3, r1
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007800:	4659      	mov	r1, fp
 8007802:	00cb      	lsls	r3, r1, #3
 8007804:	4651      	mov	r1, sl
 8007806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800780a:	4651      	mov	r1, sl
 800780c:	00ca      	lsls	r2, r1, #3
 800780e:	4610      	mov	r0, r2
 8007810:	4619      	mov	r1, r3
 8007812:	4603      	mov	r3, r0
 8007814:	4642      	mov	r2, r8
 8007816:	189b      	adds	r3, r3, r2
 8007818:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800781c:	464b      	mov	r3, r9
 800781e:	460a      	mov	r2, r1
 8007820:	eb42 0303 	adc.w	r3, r2, r3
 8007824:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007834:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800783c:	460b      	mov	r3, r1
 800783e:	18db      	adds	r3, r3, r3
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
 8007842:	4613      	mov	r3, r2
 8007844:	eb42 0303 	adc.w	r3, r2, r3
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800784e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007852:	f7f8 fcd7 	bl	8000204 <__aeabi_uldivmod>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <UART_SetConfig+0x2d4>)
 800785c:	fba3 1302 	umull	r1, r3, r3, r2
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	2164      	movs	r1, #100	; 0x64
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	00db      	lsls	r3, r3, #3
 800786c:	3332      	adds	r3, #50	; 0x32
 800786e:	4a08      	ldr	r2, [pc, #32]	; (8007890 <UART_SetConfig+0x2d4>)
 8007870:	fba2 2303 	umull	r2, r3, r2, r3
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f003 0207 	and.w	r2, r3, #7
 800787a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4422      	add	r2, r4
 8007882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007884:	e105      	b.n	8007a92 <UART_SetConfig+0x4d6>
 8007886:	bf00      	nop
 8007888:	40011000 	.word	0x40011000
 800788c:	40011400 	.word	0x40011400
 8007890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007898:	2200      	movs	r2, #0
 800789a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800789e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078a6:	4642      	mov	r2, r8
 80078a8:	464b      	mov	r3, r9
 80078aa:	1891      	adds	r1, r2, r2
 80078ac:	6239      	str	r1, [r7, #32]
 80078ae:	415b      	adcs	r3, r3
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
 80078b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078b6:	4641      	mov	r1, r8
 80078b8:	1854      	adds	r4, r2, r1
 80078ba:	4649      	mov	r1, r9
 80078bc:	eb43 0501 	adc.w	r5, r3, r1
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	00eb      	lsls	r3, r5, #3
 80078ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ce:	00e2      	lsls	r2, r4, #3
 80078d0:	4614      	mov	r4, r2
 80078d2:	461d      	mov	r5, r3
 80078d4:	4643      	mov	r3, r8
 80078d6:	18e3      	adds	r3, r4, r3
 80078d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078dc:	464b      	mov	r3, r9
 80078de:	eb45 0303 	adc.w	r3, r5, r3
 80078e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007902:	4629      	mov	r1, r5
 8007904:	008b      	lsls	r3, r1, #2
 8007906:	4621      	mov	r1, r4
 8007908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800790c:	4621      	mov	r1, r4
 800790e:	008a      	lsls	r2, r1, #2
 8007910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007914:	f7f8 fc76 	bl	8000204 <__aeabi_uldivmod>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4b60      	ldr	r3, [pc, #384]	; (8007aa0 <UART_SetConfig+0x4e4>)
 800791e:	fba3 2302 	umull	r2, r3, r3, r2
 8007922:	095b      	lsrs	r3, r3, #5
 8007924:	011c      	lsls	r4, r3, #4
 8007926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800792a:	2200      	movs	r2, #0
 800792c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007930:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	1891      	adds	r1, r2, r2
 800793e:	61b9      	str	r1, [r7, #24]
 8007940:	415b      	adcs	r3, r3
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007948:	4641      	mov	r1, r8
 800794a:	1851      	adds	r1, r2, r1
 800794c:	6139      	str	r1, [r7, #16]
 800794e:	4649      	mov	r1, r9
 8007950:	414b      	adcs	r3, r1
 8007952:	617b      	str	r3, [r7, #20]
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007960:	4659      	mov	r1, fp
 8007962:	00cb      	lsls	r3, r1, #3
 8007964:	4651      	mov	r1, sl
 8007966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796a:	4651      	mov	r1, sl
 800796c:	00ca      	lsls	r2, r1, #3
 800796e:	4610      	mov	r0, r2
 8007970:	4619      	mov	r1, r3
 8007972:	4603      	mov	r3, r0
 8007974:	4642      	mov	r2, r8
 8007976:	189b      	adds	r3, r3, r2
 8007978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800797c:	464b      	mov	r3, r9
 800797e:	460a      	mov	r2, r1
 8007980:	eb42 0303 	adc.w	r3, r2, r3
 8007984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	67bb      	str	r3, [r7, #120]	; 0x78
 8007992:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079a0:	4649      	mov	r1, r9
 80079a2:	008b      	lsls	r3, r1, #2
 80079a4:	4641      	mov	r1, r8
 80079a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079aa:	4641      	mov	r1, r8
 80079ac:	008a      	lsls	r2, r1, #2
 80079ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079b2:	f7f8 fc27 	bl	8000204 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <UART_SetConfig+0x4e4>)
 80079bc:	fba3 1302 	umull	r1, r3, r3, r2
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	2164      	movs	r1, #100	; 0x64
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	3332      	adds	r3, #50	; 0x32
 80079ce:	4a34      	ldr	r2, [pc, #208]	; (8007aa0 <UART_SetConfig+0x4e4>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079da:	441c      	add	r4, r3
 80079dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e0:	2200      	movs	r2, #0
 80079e2:	673b      	str	r3, [r7, #112]	; 0x70
 80079e4:	677a      	str	r2, [r7, #116]	; 0x74
 80079e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079ea:	4642      	mov	r2, r8
 80079ec:	464b      	mov	r3, r9
 80079ee:	1891      	adds	r1, r2, r2
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	415b      	adcs	r3, r3
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079fa:	4641      	mov	r1, r8
 80079fc:	1851      	adds	r1, r2, r1
 80079fe:	6039      	str	r1, [r7, #0]
 8007a00:	4649      	mov	r1, r9
 8007a02:	414b      	adcs	r3, r1
 8007a04:	607b      	str	r3, [r7, #4]
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a12:	4659      	mov	r1, fp
 8007a14:	00cb      	lsls	r3, r1, #3
 8007a16:	4651      	mov	r1, sl
 8007a18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a1c:	4651      	mov	r1, sl
 8007a1e:	00ca      	lsls	r2, r1, #3
 8007a20:	4610      	mov	r0, r2
 8007a22:	4619      	mov	r1, r3
 8007a24:	4603      	mov	r3, r0
 8007a26:	4642      	mov	r2, r8
 8007a28:	189b      	adds	r3, r3, r2
 8007a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	460a      	mov	r2, r1
 8007a30:	eb42 0303 	adc.w	r3, r2, r3
 8007a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007a40:	667a      	str	r2, [r7, #100]	; 0x64
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a4e:	4649      	mov	r1, r9
 8007a50:	008b      	lsls	r3, r1, #2
 8007a52:	4641      	mov	r1, r8
 8007a54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a58:	4641      	mov	r1, r8
 8007a5a:	008a      	lsls	r2, r1, #2
 8007a5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a60:	f7f8 fbd0 	bl	8000204 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <UART_SetConfig+0x4e4>)
 8007a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	2164      	movs	r1, #100	; 0x64
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	3332      	adds	r3, #50	; 0x32
 8007a7c:	4a08      	ldr	r2, [pc, #32]	; (8007aa0 <UART_SetConfig+0x4e4>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4422      	add	r2, r4
 8007a90:	609a      	str	r2, [r3, #8]
}
 8007a92:	bf00      	nop
 8007a94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a9e:	bf00      	nop
 8007aa0:	51eb851f 	.word	0x51eb851f

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 f820 	bl	8007afc <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	08007b3c 	.word	0x08007b3c
 8007ae0:	08007b3c 	.word	0x08007b3c
 8007ae4:	08007b3c 	.word	0x08007b3c
 8007ae8:	08007b44 	.word	0x08007b44

08007aec <memset>:
 8007aec:	4402      	add	r2, r0
 8007aee:	4603      	mov	r3, r0
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d100      	bne.n	8007af6 <memset+0xa>
 8007af4:	4770      	bx	lr
 8007af6:	f803 1b01 	strb.w	r1, [r3], #1
 8007afa:	e7f9      	b.n	8007af0 <memset+0x4>

08007afc <_init>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr

08007b08 <_fini>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr
